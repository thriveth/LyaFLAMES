#+title: Flames-LAEs project overview
#+author: T. Emil Rivera-Thorsen 
:preamble:
#+COLUMNS: %25ITEM %5TODO %10TAGS
:end:

* README
In this document, I intende to keep a list of what I am doing when,
what I need to do in the future as well as clocking in and out of
tasks for the VLT/FLAMES Lyman-\alpha Emitters project.

* About the instrument (instrument handbook reading notes)
:LOGBOOK:
CLOCK: [2021-08-19 Thu 10:01]--[2021-08-19 Thu 12:30] =>  2:29
:END:
** Instrument overview
- A multi-object, intermiedate- and high-resolution fibre
  spectrograph.
*** Components
**** Corrector (not interesting for me)
**** Fibre positioner
Two plates (that seem to be identical?)
**** Fibres over to UVES' red arm: 8 fibres
***** UVES is designed to work only in slit mode
***** Retrofitted 8 fibres to the Red arm only
***** R \sim 47.000

**** Own spectrograph: GIRAFFE with 3 settings
- R = 7.500 -- 45.000
- Coverage: 370 - 950 nm
- HR grating and LR grating
- 0.19"/pixel
***** MEDUSA
****** 131 objects including sky
****** 1.2" aperture
****** High resolution mode
******* R = 19.000
******* Coverage = \lambda/22 - \lambda/12
Where \lambda is a defining wavelength
****** Low resolution mode
******* R = 7000
******* Coverage = \lambda/9.5
****** Fibres all lead to same slit (\times2)
****** Some broken fibres
***** IFU
****** 15 small IFUs for each plate
One additional thick sky fibre for each.
****** Each IFU has 20 lenslets, 4\times4+2+2
***** ARGUS
****** Large IFU: 22\times14 microlenses

***** Calibration 
****** Simultaneous Calibration Unit (SCU)
Takes Th-Ar lamp frames during observations in parallel to save time
for observing. 
**** UVES and GIRAFFE can run simultaneously w. specialized software

**** Limitations and caveats

** FLAMES features and problems
*** Maximum reachable SNR
Because of details of the fibre setup, there is an upper limit to the
attainable SNR. It is hard to know exactly how much it is, but it is
at least (and probably not a lot more than) 400. (page 38) .

** GIRAFFE problems and features

*** Problems with blue end in screenflats for ARGUS
Problems with screen flats for ARGUS  for the bluest settings, not
enough SNR in the flats in the bluest end.

*** Contamination from simultaneous Th-Ar calib exposures
Flux can get into neighboring fibres (or when getting into the slit or
something... Can contaminate, in any case). Especially in the reddest
setups. 

** Instrument manual
*** Reading notes
** Data reduction cookbook
*** Reading modes
* Data reduction cookbook reading notes
** 2. A brief overview of data reduction of multi-fiber spectroscopy data
*** 2.1 Multi-fiber spectroscopy
Basic steps of multi-fiber spectroscopy (p.10):

**** Correcting for detector cosmics
***** Subtracting bias
***** Subtracting dark
***** bad pixel correction
***** Cosmic ray hits
***** Correction of pixel to pixel variation (flat fielding)

**** Fiber tracing: What object goes where on the CCD?
They use a flat field observation for that. At various locations along
the dispersion direction, the profile of the many fibres illuminating
it is fitted to a gaussian, creating /Gaussian tubes/ in which the
actual science signal later will be detected.  This makes it possible
to know where to extract data from for each individual fibre on the
CCD also later, when the signal may actually be too faint to see
directly. 

**** Extracton, flat-fiels spectrum and fiber transmission.
First, flat field spectra are extracted in the flat field determined
Gaussian tubes from before.  There is:

- Summed extraction
- Optimum extraction (Horne 1986)

The extraction gives a flat field spectrum, and also gives fiber
transmission profiles, since the light entering the fibres is assumed
to be constant by design, and so if the brightness is markedly
different on the CCD between fibre positions, it must be due to
variations in transmission between fibres, it is a few percent between
fibres (p. 14 top).

Flat fielding is done in one rather than two dimensions when doing
fibre spectroscopy.

**** Scattered light correction
Scatterd light is basically an underlying broad (constant?) component
in the light profile of the fibres, underlying the narrow and strong
Gaussians. It has two components:

- Smooth component, removed by measuring the brightness in pixels in
  between the fibre tunnels, fitting a function (polynoumial, I guess)
  to these, and subtracting the resulting model.
- Local component consisting in spillover from e.g. bright calibration
  fibres into faint science fibres, is hard to model and requires some
  work (but they don't tell which work), apart from taking a more
  detailed look in the interfibre regions.

**** Standard star calibration for IFU and ARGUS (not MEDUSA...?!)
**** Wavelength calibration
**** Extraction of science data
**** Sky subtraction
Nope. Not in the pipeline. (p. 17).
#+attr_org: :width 700px
[[file:org-download/2021-08-21_03-21-48_screenshot.png]]

** 3. The pipeline: Gasgano

* Observation settings

| Spectrograph    | GIRAFFE       |
| MODE            | MEDUSA fibres |
| Aperture        | 1.2"          |
| Resolving power |               |
| Spectral band   | 3 of 'em      |

* WAIT Flames data organization
:LOGBOOK:
- State "WAIT"       from "PROG"       [2021-09-01 Wed 16:58]
- State "PROG"       from "TODO"       [2021-09-01 Wed 16:57]
CLOCK: [2021-08-23 Mon 12:00]--[2021-08-23 Mon 12:01] =>  0:01
:END:
** Data structure overview
:LOGBOOK:
CLOCK: [2021-08-16 Mon 11:49]--[2021-08-16 Mon 12:10] =>  0:21
:END:
*** List of runs
**** Run1
**** Run2
**** Run3
* Information on targets
** Redshifts 
*** LEGO targets are all z\sim3.15

- cite:nilsson2007

* DONE Run Astroscrappy                                                :scrappy:
:LOGBOOK:
- State "DONE"       from "PROG"       [2021-09-22 Wed 13:35]
- State "PROG"       from "TODO"       [2021-09-21 Tue 21:09]
:END:
** Imports and setup
*** Imports
#+BEGIN_SRC jupyter-python :session scrappy :results silent
  %pylab
  
  from subprocess import getoutput
  
  from astropy.io import fits
  from astropy.table import Table
  from astropy.visualization import simple_norm
  
  import astroscrappy as scrap
#+END_SRC

*** Setup
First and foremost: Find the science frames given the run ID

**** Set run ID

#+BEGIN_SRC jupyter-python :session scrappy :results silent :dir ~/Arbejde/AAB-LyaFLAMES/
  runID = '106.219R.001'
#+END_SRC

**** Find list of files

#+BEGIN_SRC jupyter-python :session scrappy
  def find_science_frames(runID):
      framepath = f"Data/Runs/{runID}/"
      command = f"dfits {framepath}*.fits | fitsort dpr.catg | grep -i science"
      filestr = getoutput(command)
      framelist = [t.split()[0] for t in filestr.split("\n")]
      return framelist
  
  science_frames = find_science_frames(runID)
  [[sf] for sf in science_frames]
#+END_SRC

#+RESULTS[809e63cbd96b82a3be49a466dc970350738c76ab]:
| Data/Runs/106.219R.001/GIRAF.2021-01-17T01:26:09.801.fits |
| Data/Runs/106.219R.001/GIRAF.2021-01-17T01:49:47.838.fits |
| Data/Runs/106.219R.001/GIRAF.2021-01-17T02:18:19.127.fits |
| Data/Runs/106.219R.001/GIRAF.2021-01-17T02:41:57.334.fits |

** Run ~astroscrappy~

#+BEGIN_SRC jupyter-python :session scrappy :cache nil
  def run_astroscrappy(inframe, cmap="cubehelix", verbose=False):
      # sfile = fits.open(inpath)
      sframe = inframe  # sfile[0].data
      # shead = sfile[0].header
      bframe = fits.getdata(f"./Data/Runs/{runID}/pipe_products/bad_pixel_map.fits")
      norm = simple_norm(sframe, stretch='sqrt', min_cut=median(sframe), max_cut=400)
      scrapframe, cleanframe = scrap.detect_cosmics(
          sframe,
          inmask=bframe,
          sigclip=2,
          sigfrac=0.3,
          objlim=2,
          psffwhm=3,
          verbose=verbose,
      )
      fig, axes = subplots(1, 4, sharex=True, sharey=True, dpi=200)
      axes[0].imshow(sframe, norm=norm, cmap=cmap)
      axes[1].imshow(cleanframe, norm=norm, cmap=cmap)
      axes[2].imshow(scrapframe, cmap=cmap)
      axes[3].imshow(bframe, cmap=cmap)
      return scrapframe, cleanframe
  
  def scrappy_single_frame(inpath, cmap="viridis", verbose=False):
      infile = fits.open(inpath, mode='update')
      if "ORIG" in [h.name for h in infile]:
          itsthere = True
          print("ORIG was there!")
          inframe = infile["ORIG"].data
      else:
          print("ORIG was NOT there!")
          inframe = infile["PRIMARY"].data
          infile.append(fits.PrimaryHDU())
          infile[-1].name = "ORIG"
          infile[-1].data = inframe
      mframe, cframe = run_astroscrappy(inframe, cmap=cmap, verbose=verbose)
      print(type(cframe), "cframe type")
      infile['PRIMARY'].data = cframe.astype(inframe.dtype)
      infile.writeto(inpath, overwrite=True)
      return infile
  
  ifl = scrappy_single_frame(science_frames[0], verbose=True)
#+END_SRC

#+RESULTS[24345549b2325848c74c08c8f73d5286969a493d]:
#+begin_example
  ORIG was NOT there!
  Starting 4 L.A.Cosmic iterations
  Iteration 1:
  9517 cosmic pixels this iteration
  Iteration 2:
  342 cosmic pixels this iteration
  Iteration 3:
  6 cosmic pixels this iteration
  Iteration 4:
  0 cosmic pixels this iteration
  <class 'numpy.ndarray'> cframe type
#+end_example

:scrappyimg:
#+attr_org: :width 900px
[[file:Figures/Scrappy_out_check.png]]
:end:

** Run scrappy on all frames in the list:
#+BEGIN_SRC jupyter-python :session scrappy :cache nil
  infiles = []
  for sf in science_frames:
      ifl = scrappy_single_frame(
          sf, cmap="viridis")
      infiles.append(ifl)
#+END_SRC

#+RESULTS:
#+begin_example
  ORIG was NOT there!
  ORIG was there!
  <astropy.io.fits.hdu.image.ImageHDU object at 0x7f1c32c37710>
  Filename: Data/Runs/106.219R.001/GIRAF.2021-01-17T01:49:47.838.fits
  No.    Name      Ver    Type      Cards   Dimensions   Format
    0  PRIMARY       1 PrimaryHDU     504   (2148, 4096)   uint16   
    1  OzPoz_table    1 BinTableHDU     98   135R x 16C   [30A, 1D, 1D, 1D, 1D, 1D, 1D, 20A, 1I, 1B, 1D, 1A, 1E, 1E, 1E, 256A]   
    2  FLAMES FIBRE Table    1 BinTableHDU     51   1252R x 20C   [16A, 4A, 4A, 4A, 16A, 4A, 16A, 4A, 4A, 4A, 4A, 4A, 4A, 4A, 4A, 4A, 4A, 4A, 4A, 4A]   
  ORIG was there!
  <astropy.io.fits.hdu.image.ImageHDU object at 0x7f1c335632d0>
  Filename: Data/Runs/106.219R.001/GIRAF.2021-01-17T02:18:19.127.fits
  No.    Name      Ver    Type      Cards   Dimensions   Format
    0  PRIMARY       1 PrimaryHDU     504   (2148, 4096)   uint16   
    1  OzPoz_table    1 BinTableHDU     98   135R x 16C   [30A, 1D, 1D, 1D, 1D, 1D, 1D, 20A, 1I, 1B, 1D, 1A, 1E, 1E, 1E, 256A]   
    2  FLAMES FIBRE Table    1 BinTableHDU     51   1252R x 20C   [16A, 4A, 4A, 4A, 16A, 4A, 16A, 4A, 4A, 4A, 4A, 4A, 4A, 4A, 4A, 4A, 4A, 4A, 4A, 4A]   
  ORIG was there!
  <astropy.io.fits.hdu.image.ImageHDU object at 0x7f1c366d13d0>
  Filename: Data/Runs/106.219R.001/GIRAF.2021-01-17T02:41:57.334.fits
  No.    Name      Ver    Type      Cards   Dimensions   Format
    0  PRIMARY       1 PrimaryHDU     504   (2148, 4096)   uint16   
    1  OzPoz_table    1 BinTableHDU     98   135R x 16C   [30A, 1D, 1D, 1D, 1D, 1D, 1D, 20A, 1I, 1B, 1D, 1A, 1E, 1E, 1E, 256A]   
    2  FLAMES FIBRE Table    1 BinTableHDU     51   1252R x 20C   [16A, 4A, 4A, 4A, 16A, 4A, 16A, 4A, 4A, 4A, 4A, 4A, 4A, 4A, 4A, 4A, 4A, 4A, 4A, 4A]   
#+end_example

* DONE Run pipeline                                                   :pipeline:
:LOGBOOK:
- State "DONE"       from "PROG"       [2021-09-23 Thu 15:25]
- State "PROG"       from "WAIT"       [2021-09-10 Fri 09:50]
- State "WAIT"       from "NEXT"       [2021-09-07 Tue 21:04] \\
  Awaiting reply from the ESO helpdesk.
- State "NEXT"       from              [2021-09-03 Fri 13:36]
:END:
** Imports and setup
*** Imports
This is not a very python-y session...

#+BEGIN_SRC jupyter-python :session pipeline :results silent
  %pylab
  
  import os
  import glob
  import shutil
  import subprocess
  import pandas as pd
  from astropy.table import Table
  from astropy.io import fits
  import astropy.units as u
#+END_SRC

*** Global variables
**** Set the run name
#+name: runID
#+BEGIN_SRC python :results silent
  return "106.219R.001"
#+END_SRC

**** Get all OB IDs in the given run
#+name: OBs
#+BEGIN_SRC python :dir /home/trive/Arbejde/AAB-LyaFLAMES/ :var runID=runID :results value silent
  import subprocess
  command = "dfits Data/Runs/{}/*.fits | fitsort DPR.TYPE DPR.TECH PRO.CATG OBS.NAME OBS.PROG.ID | grep OBJECT".format(runID)
  ll = subprocess.getoutput(command).split("\n")
  OBs = {l.split()[-2] for l in ll}
  return OBs
#+END_SRC

#+RESULTS: OBs
| GOODSS_F3_2 | GOODSS_F3_3 |

**** GIRAFFE pipeline static calibration files
#+BEGIN_SRC jupyter-python :session pipeline :results raw
  staticdir = "/home/trive/Software/ESO/install/calib/giraf-2.16.8/"
  staticthing = subprocess.getoutput("dfits {}*.fits | fitsort PRO.CATG".format(staticdir))
  staticcalib = {s.split()[-1]: staticdir+s.split()[0] for s in staticthing.split("\n")}
  slitgeo = {n: "slit_geometry_medusa{}.fits".format(n) for n in [1, 2]}
#+END_SRC

#+RESULTS[0a35f5fbc3b62f24fa3db3168d3be1ae2983b4dd]:

** DONE Make master bias
:LOGBOOK:
- State "DONE"       from              [2021-09-10 Fri 14:35]
:END:
*** Make ~.sof~ 's

#+BEGIN_SRC jupyter-python :session pipeline :cache nil :var runID=runID OBs=OBs
  def make_bias_sof(runID):
      dfits = "dfits Data/Runs/{}/*.fits".format(runID)
      sorts = "fitsort DPR.TYPE OBS.NAME"
      grep1 = "grep -i BIAS"
      filename = "Data/Runs/{}/1_makebias.sof".format(runID)
      commandstring = " | ".join([dfits, sorts, grep1])
      dfits = subprocess.getoutput(commandstring)
      dfits = dfits.strip().split('\n')[:-1]
      with open(filename, "w") as outfile:
          for r in dfits:
              outline = "\t".join(r.split()[:2])+"\n"
              outfile.write(outline)
  
  make_bias_sof(runID)
#+END_SRC

#+RESULTS:

*** Run esorex recipe
#+header: :shebang #! /bin/bash -i :dir ~/Arbejde/AAB-LyaFLAMES/
#+begin_src bash :results output :var RUN=runID
  DIRPATH="./Data/Runs/$RUN/pipe_products/$OB/"
  echo $DIRPATH
  [ ! -d $DIRPATH ] && mkdir $DIRPATH && echo "Created dir" || echo "It was alredy there!"
  esorex --output-dir=$DIRPATH gimasterbias --bpm-create=true ./Data/Runs/$RUN/1_makebias.sof
#+end_src

#+RESULTS:
#+begin_example
./Data/Runs/106.219R.001/pipe_products//
It was alredy there!

     ,***** ESO Recipe Execution Tool, version 3.13.5  *****

[ INFO  ] gimasterbias: Creating master bias from 4 bias frames ...
[ INFO  ] gimasterbias: Combination method is Average
[ INFO  ] gimasterbias: Averaging 4 images

[ INFO  ] gimasterbias: Writing master bias image ...
[ INFO  ] gimasterbias: Creating bad pixel map from master bias frame ...
[ INFO  ] gimasterbias: Using local median +/- 0.8832 [ADU] as valid pixel value range
[ INFO  ] gimasterbias: Computing QC1 parameters ...
[ INFO  ] gimasterbias: Processing product frame 'master_bias.fits' (MASTER_BIAS)
[ INFO  ] esorex: Calculating product checksums
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products//master_bias.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products//bad_pixel_map.fits
[ INFO  ] esorex: 2 products created
[ INFO  ] esorex: Recipe operation(s) took           3.42 seconds to complete.
[ INFO  ] esorex: Total size of 4 raw input frames  =    71.17 MB

[ INFO  ] esorex: => processing rate of    20.84 MB/sec 

#+end_example

** WONTDO Make master dark
:LOGBOOK:
- State "WONTDO"     from              [2021-09-07 Tue 20:39] \\
  Not necessary for observations carried out after May 15th, 2008, when
  the old CCD /Bruce/, was replaced by the new CCD, /Carrera/. See manual p. 39.
:END:
*** WONTDO Make ~.sof~ 's
Uh ok these data don't have DARK frames.
:LOGBOOK:
- State "WONTDO"     from "WAIT"       [2021-09-07 Tue 20:39]
- State "WAIT"       from              [2021-09-04 Sat 01:22]
:END:

#+BEGIN_SRC jupyter-python :session pipeline :cache nil :var runID=runID OBs=OBs
  def make_dark_sof(runID):
      dfits = "dfits Data/Runs/{}/*.fits".format(runID)
      sorts = "fitsort DPR.TYPE OBS.NAME"
      grep1 = "grep -i DARK"
      filename = "Data/Runs/{}/2_makedark.sof".format(runID)
      commandstring = " | ".join([dfits, sorts, grep1])
      dfits = subprocess.getoutput(commandstring)
      dfits = dfits.strip().split('\n')[:-1]
      with open(filename, "w") as outfile:
          for r in dfits:
              outline = "\t".join(r.split()[:2])+"\n"
              outfile.write(outline)
  
  make_dark_sof(runID)
#+END_SRC

#+RESULTS:

** DONE Make master flats
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-09-10 Fri 13:52]
- State "NEXT"       from              [2021-09-07 Tue 21:04]
:END:
*** Make ~.sof~ 's

#+BEGIN_SRC jupyter-python :session pipeline :results drawer :cache nil :var runID=runID OBs=OBs 
  def make_flat_sof(runID):
      dfits = "dfits Data/Runs/{}/*.fits".format(runID)
      sorts = "fitsort DPR.TYPE PRO.CATG OBS.NAME"
      grep1 = "grep -i FLAT"
      filename = "Data/Runs/{}/3_makeflat.sof".format(runID)
      commandstring = " | ".join([dfits, sorts, grep1])
  
      platenocomm = " | ".join([dfits, sorts+" INS.OBSPLATE", "grep OzPoz"])
      platenlist = subprocess.getoutput(platenocomm)
      plateno = unique([int(r.split()[-1]) for r in platenlist.split("\n")])[0]
  
  
      dfits1 = subprocess.getoutput(commandstring)
      dfits1 = dfits1.strip().split('\n')#[:-1]
  
      comst5 = " | ".join([dfits, sorts, "grep SLIT_GEOMETRY_SETUP"])
      sligeo = subprocess.getoutput(comst5)
      sligem = "/home/trive/Software/ESO/install/calib/giraf-2.16.8/slit_geometry_medusa{}.fits".format(plateno)
  
      comst5 = " | ".join([dfits, sorts, "grep SLIT_GEOMETRY_SETUP"])
      sligeo = subprocess.getoutput(comst5)
  
      comst6 = " | ".join([dfits, sorts, "grep GRATING_DATA"])
      gratda = subprocess.getoutput(comst6)
  
      with open(filename, "w") as outfile:
          for r in dfits1:
              outline = r.split()[0]+"\tFIBER_FLAT\n"
              outfile.write(outline)
          outfile.write("\t".join([sligeo.split()[0], sligeo.split()[1]])+"\n")
          outfile.write(sligem+"\t"+"SLIT_GEOMETRY_MASTER"+"\n")
          outfile.write("\t".join([gratda.split()[0], gratda.split()[1]])+"\n")
          outfile.write("Data/Runs/{}/pipe_products/master_bias.fits\tMASTER_BIAS\n".format(runID))
          outfile.write("Data/Runs/{}/pipe_products/bad_pixel_map.fits\tBAD_PIXEL_MAP\n".format(runID))
      return plateno
  
  xx = make_flat_sof(runID)
#+END_SRC

#+RESULTS:
:results:
:end:

*** Run esorex recipe
#+header: :shebang #! /bin/bash :dir ~/Arbejde/AAB-LyaFLAMES/
#+begin_src bash :results output :var RUN=runID
  DIRPATH="./Data/Runs/$RUN/pipe_products/$OB"
  echo $DIRPATH
  [ ! -d $DIRPATH ] && mkdir $DIRPATH && echo "Created dir" || echo "It was alredy there!"
  esorex --output-dir=$DIRPATH gimasterflat --fiber-nspec=134 --extr-method=OPTIMAL ./Data/Runs/$RUN/3_makeflat.sof
#+end_src

#+RESULTS:
#+begin_example
./Data/Runs/106.219R.001/pipe_products/
It was alredy there!

     ,***** ESO Recipe Execution Tool, version 3.13.5  *****

[ INFO  ] gimasterflat: No master dark present in frame set.
[ INFO  ] gimasterflat: No master localization (centroid position) present in frame set.
[ INFO  ] gimasterflat: No master localization (spectrum width) present in frame set.
[ INFO  ] gimasterflat: No master localization (PSF parameters) present in frame set.
[ INFO  ] gimasterflat: No scattered light model present in frame set.
[ INFO  ] gimasterflat: No wavelength solution present in frame set.
[ INFO  ] gimasterflat: Averaging flat field frames ...
[ INFO  ] gimasterflat: Updating stacked flat field image properties ...
[ INFO  ] gimasterflat: Using bias area(s) '5:40:0:4095' for bias computation
[ INFO  ] gimasterflat: Bias correction will be done.
[ INFO  ] gimasterflat: Using bias model 'PLANE (FITTED)' ...
[ INFO  ] gimasterflat: Bias Areas: specified are 147456 points in 2148x4096 image
[ INFO  ] gimasterflat: Bias Areas: Using 5:40:0:4095; [147456 pixels]
[ INFO  ] gimasterflat: Sigma Clipping : Start
[ INFO  ] gimasterflat: Sigma Clipping : bias plane[0]: 248.065 + 0.00392947 * x + -0.000253573 * y, sigma = 1.2341, ratio = 1, accepted = 147456

[ INFO  ] gimasterflat: Sigma Clipping : bias plane[1]: 248.198 + 0.00411388 * x + -0.000302315 * y, sigma = 1.1572, ratio = 0.9842, accepted = 145121

[ INFO  ] gimasterflat: Sigma Clipping : bias plane[2]: 248.26 + 0.00440178 * x + -0.000327378 * y, sigma = 1.1287, ratio = 0.976, accepted = 143913

[ INFO  ] gimasterflat: Sigma Clipping : bias plane[3]: 248.305 + 0.00376874 * x + -0.000338002 * y, sigma = 1.1148, ratio = 0.9717, accepted = 143290

[ INFO  ] gimasterflat: Sigma Clipping : bias plane[4]: 248.306 + 0.00369181 * x + -0.000337706 * y, sigma = 1.1128, ratio = 0.9711, accepted = 143191

[ INFO  ] gimasterflat: Sigma Clipping : End
[ INFO  ] gimasterflat: Sigma Clipping Results (5/143174, sigma = 1.11275)
[ INFO  ] gimasterflat: Using bias method 'PROFILE'
[ INFO  ] gimasterflat: Bias Areas: Found 147456 points in 2148x4096 image
[ INFO  ] gimasterflat: Resulting biaslimits : 5:40:0:4095;
[ INFO  ] gimasterflat: Writing master flat field image ...
[ INFO  ] gimasterflat: Recipe Step: Fiber setup
[ INFO  ] gimasterflat: Building fiber setup for frame 'Data/Runs/106.219R.001/GIRAF.2021-01-17T10:42:58.877.fits'.
[ INFO  ] gimasterflat: Simultaneous calibration lamps are on.
[ INFO  ] gimasterflat: Fiber setup taken from flat field frame 'Data/Runs/106.219R.001/GIRAF.2021-01-17T10:42:58.877.fits'.
[ INFO  ] gimasterflat: Setting number of fibers (ESO PRO SLIT NFIBRES) to 133
[ INFO  ] gimasterflat: Bias sigma value: 2.23 e-
[ INFO  ] gimasterflat: Noise multiplier: 7
[ INFO  ] gimasterflat: Configuring equilizing filter width from instrument mode
[ INFO  ] gimasterflat: Setting equilizing filter to 16 [pxl] for slit configuration `Medusa2'
[ INFO  ] gimasterflat: Using raw spectra for localization
[ INFO  ] gimasterflat: Generating mask (133 spectra expected) ...
[ INFO  ] gimasterflat: 133 spectra detected in 4096 wavelength bins
[ INFO  ] gimasterflat: Computing spectrum positions and widths in pixel range [0,4095]
[ INFO  ] gimasterflat: Using barycenter for localization
[ INFO  ] gimasterflat: 133 spectrum positions fitted
[ INFO  ] gimasterflat: 2D fit (order 3x3) of mask width
[ INFO  ] gimasterflat: Mask was computed using 4096 of 4096 wavelength bins
[ INFO  ] gimasterflat: Average # of pixels per spectra: 4.329e+04
[ INFO  ] gimasterflat: Average # of in-borders pixels per spectra: 3.475e+04
[ INFO  ] gimasterflat: Average lost pixels per spectra: 0.02657
[ INFO  ] gimasterflat: Average lost pixels at upper border: 1.056
[ INFO  ] gimasterflat: Average lost pixels at lower border: -1.029
[ INFO  ] gimasterflat: Average spectrum width: 10.57 +/- 0.2288, (min, max) = (10.32, 11.12)
[ INFO  ] gimasterflat: Writing fiber localization ...
[WARNING] gimasterflat: Missing dark value property (ESO PRO DARK VALUE) will be set to 0.00!
[ INFO  ] gimasterflat: Fitting fiber profiles ...
[ INFO  ] gimasterflat: Fitting PSF profile parameters ...
[ INFO  ] gimasterflat: Writing fiber traces ...
[ INFO  ] gimasterflat: Extracting spectra ...
[ INFO  ] gimasterflat: Computing relative fiber transmission ...
[ INFO  ] gimasterflat: Performing Rebinning of spectra, stepsize=0.0200 [nm], resulting image size=2896, using x residuals : No
[ INFO  ] gimasterflat: Rebinning method    : linear
[ INFO  ] gimasterflat: Scaling method      : linear, wavelength [nm]: min,max,range = 449.900, 507.800, 57.900
[ INFO  ] gimasterflat: Wavelength range    : Common
[ INFO  ] gimasterflat: Writing extracted spectra ...
[ INFO  ] gimasterflat: Computing QC1 parameters ...
[ INFO  ] gimasterflat: Processing product frame 'master_fiber_flat.fits' (MASTER_FIBER_FLAT)
[ INFO  ] gimasterflat: Processing product frame 'ff_loccentroid.fits' (FF_LOCCENTROID)
[ INFO  ] gimasterflat: Processing product frame 'ff_locwidth.fits' (FF_LOCWIDTH)
[ INFO  ] gimasterflat: Processing product frame 'ff_extspectra.fits' (FF_EXTSPECTRA)
[ INFO  ] esorex: Calculating product checksums
[WARNING] esorex: Product final output path file already exists and will be overwritten (/home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/master_fiber_flat.fits)
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/master_fiber_flat.fits
[WARNING] esorex: Product final output path file already exists and will be overwritten (/home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/ff_loccentroid.fits)
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/ff_loccentroid.fits
[WARNING] esorex: Product final output path file already exists and will be overwritten (/home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/ff_locwidth.fits)
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/ff_locwidth.fits
[WARNING] esorex: Product final output path file already exists and will be overwritten (/home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/ff_locfit.fits)
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/ff_locfit.fits
[WARNING] esorex: Product final output path file already exists and will be overwritten (/home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/ff_psfcentroid.fits)
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/ff_psfcentroid.fits
[WARNING] esorex: Product final output path file already exists and will be overwritten (/home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/ff_psfwidth.fits)
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/ff_psfwidth.fits
[WARNING] esorex: Product final output path file already exists and will be overwritten (/home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/ff_psffit.fits)
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/ff_psffit.fits
[WARNING] esorex: Product final output path file already exists and will be overwritten (/home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/fiber_profile.fits)
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/fiber_profile.fits
[WARNING] esorex: Product final output path file already exists and will be overwritten (/home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/ff_extspectra.fits)
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/ff_extspectra.fits
[WARNING] esorex: Product final output path file already exists and will be overwritten (/home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/ff_exterrors.fits)
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/ff_exterrors.fits
[WARNING] esorex: Product final output path file already exists and will be overwritten (/home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/ff_extpixels.fits)
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/ff_extpixels.fits
[WARNING] esorex: Product final output path file already exists and will be overwritten (/home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/ff_exttraces.fits)
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/ff_exttraces.fits
[ INFO  ] esorex: 12 products created
[ INFO  ] esorex: Recipe operation(s) took           29.9 seconds to complete.
[ INFO  ] esorex: Total size of 3 raw input frames  =    53.46 MB

[ INFO  ] esorex: => processing rate of     1.79 MB/sec 

#+end_example

** DONE Wave calibration!
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-09-10 Fri 13:59]
- State "NEXT"       from              [2021-09-10 Fri 13:52]
:END:
*** Make ~.sof~ 's

#+BEGIN_SRC jupyter-python :session pipeline :results drawer :cache nil :var runID=runID OBs=OBs 
    def make_waca_sof(runID):
        dfits = "dfits Data/Runs/{}/*.fits".format(runID)
        sorts = "fitsort DPR.TYPE PRO.CATG OBS.NAME"
        grep1 = "grep -i WAVE"
        filename = "Data/Runs/{}/4_wavecal.sof".format(runID)
        commandstring = " | ".join([dfits, sorts, grep1])
        dfits1 = subprocess.getoutput(commandstring)
        dfits1 = dfits1.strip().split('\n')#[:-1]
        pdir = f'Data/Runs/{runID}/pipe_products/' 
        FFdict = {
            "FF_LOCCENTROID": pdir+"ff_loccentroid.fits",
            "FF_PSFCENTROID": pdir+"ff_psfcentroid.fits",
            "FF_LOCWIDTH": pdir+"ff_locwidth.fits",
            "FF_PSFWIDTH": pdir+"ff_psfwidth.fits"
        }
  
        comst3 = " | ".join([dfits, sorts, "grep LINE_CATALOG"])
        lincat = subprocess.getoutput(comst3)
  
        # comst4 = " | ".join([dfits, sorts, "grep DISPERSION_SOLUTION"])
        # dissol = subprocess.getoutput(comst4)
  
        comst5 = " | ".join([dfits, sorts, "grep SLIT_GEOMETRY_SETUP"])
        sligeo = subprocess.getoutput(comst5)
  
        comst6 = " | ".join([dfits, sorts, "grep GRATING_DATA"])
        gratda = subprocess.getoutput(comst6)
  
        with open(filename, "w") as outfile:
            for r in dfits1:
                outline = r.split()[0]+"\tARC_SPECTRUM\n"
                outfile.write(outline)
            outfile.write("Data/Runs/{}/pipe_products/master_bias.fits\tMASTER_BIAS\n".format(runID))
            for r in FFdict.keys():
                outline = FFdict[r] + "\t" + r + "\n"
                outfile.write(outline)
            # outfile.write("\t".join([dissol.split()[0], dissol.split()[1]])+"\n")
            outfile.write("\t".join([sligeo.split()[0], sligeo.split()[1]])+"\n")
            outfile.write("\t".join([gratda.split()[0], gratda.split()[1]])+"\n")
            outfile.write("\t".join([lincat.split()[0], lincat.split()[1]])+"\n")
            outfile.write("Data/Runs/{}/pipe_products/bad_pixel_map.fits\tBAD_PIXEL_MAP\n".format(runID))
        return
  
    xx = make_waca_sof(runID)
#+END_SRC

#+RESULTS:
:results:
:end:
:end:
:end:

*** Run esorex recipe
#+header: :shebang #! /bin/bash -i :dir ~/Arbejde/AAB-LyaFLAMES/
#+begin_src bash :results output :var RUN=runID
  DIRPATH="./Data/Runs/$RUN/pipe_products/$OB"
  echo $DIRPATH
  [ ! -d $DIRPATH ] && mkdir $DIRPATH && echo "Created dir" || echo "It was alredy there!"
  esorex --output-dir=$DIRPATH giwavecalibration  ./Data/Runs/$RUN/4_wavecal.sof
#+end_src

#+RESULTS:
#+begin_example
./Data/Runs/106.219R.001/pipe_products/
It was alredy there!

     ,***** ESO Recipe Execution Tool, version 3.13.5  *****

[ INFO  ] giwavecalibration: Recipe Step : Initialization
[ INFO  ] giwavecalibration: No PSF profile parameters present in frame set.
[ INFO  ] giwavecalibration: No scattered light model present in frame set.
[ INFO  ] giwavecalibration: No wavelength solution present in frame set.
[ INFO  ] giwavecalibration: No slit geometry mask present in frame set.
[ INFO  ] giwavecalibration: Recipe Step : Bias Removal
[ INFO  ] giwavecalibration: Using bias area(s) '5:40:0:4095' for bias computation
[ INFO  ] giwavecalibration: Bias correction will be done.
[ INFO  ] giwavecalibration: Using bias model 'PLANE (FITTED)' ...
[ INFO  ] giwavecalibration: Bias Areas: specified are 147456 points in 2148x4096 image
[ INFO  ] giwavecalibration: Bias Areas: Using 5:40:0:4095; [147456 pixels]
[ INFO  ] giwavecalibration: Sigma Clipping : Start
[ INFO  ] giwavecalibration: Sigma Clipping : bias plane[0]: 241.388 + -0.000198832 * x + 0.000315608 * y, sigma = 1.7318, ratio = 1, accepted = 147456

[ INFO  ] giwavecalibration: Sigma Clipping : bias plane[1]: 241.416 + -0.000307277 * x + 0.000309214 * y, sigma = 1.639, ratio = 0.9848, accepted = 145214

[ INFO  ] giwavecalibration: Sigma Clipping : bias plane[2]: 241.398 + -0.000319569 * x + 0.000317707 * y, sigma = 1.6193, ratio = 0.9806, accepted = 144595

[ INFO  ] giwavecalibration: Sigma Clipping : bias plane[3]: 241.394 + -0.000288724 * x + 0.000318733 * y, sigma = 1.6137, ratio = 0.9793, accepted = 144409

[ INFO  ] giwavecalibration: Sigma Clipping : bias plane[4]: 241.392 + -0.000269642 * x + 0.000318919 * y, sigma = 1.6123, ratio = 0.979, accepted = 144360

[ INFO  ] giwavecalibration: Sigma Clipping : End
[ INFO  ] giwavecalibration: Sigma Clipping Results (5/144352, sigma = 1.61227)
[ INFO  ] giwavecalibration: Using bias method 'PROFILE'
[ INFO  ] giwavecalibration: Bias Areas: Found 147456 points in 2148x4096 image
[ INFO  ] giwavecalibration: Resulting biaslimits : 5:40:0:4095;
[ INFO  ] giwavecalibration: Recipe Step : Fiber Setup
[ INFO  ] giwavecalibration: Building fiber setup for frame 'Data/Runs/106.219R.001/GIRAF.2021-01-17T10:48:36.132.fits'.
[ INFO  ] giwavecalibration: Simultaneous calibration lamps are on.
[ INFO  ] giwavecalibration: Fiber reference setup taken from localization frame 'Data/Runs/106.219R.001/pipe_products/ff_psfcentroid.fits'.
[ INFO  ] giwavecalibration: Recipe Step : Spectrum Extraction
[WARNING] giwavecalibration: Missing dark value property (ESO PRO DARK VALUE), will be set to 0.!
[ INFO  ] giwavecalibration: Writing extracted spectra ...
[ INFO  ] giwavecalibration: Recipe Step : Wavelength Calibration
[ INFO  ] giwavecalibration: Computing line positions on the CCD using model `xoptmod2'
[ INFO  ] giwavecalibration: 80 lines have been selected from the line list.
[ INFO  ] giwavecalibration: Current search window width: 10 pxl
[ INFO  ] giwavecalibration: Applying crowding criterium to line list.
[ INFO  ] giwavecalibration: 63 lines used for fit. 17 of 80 lines rejected due to crowding and line quality.
[ INFO  ] giwavecalibration: Fitting 63 line profiles for 133 spectra using line model `psfexp'
[ INFO  ] giwavecalibration: Total number of lines to fit: 8379  (133 x 63)
[ INFO  ] giwavecalibration: Number of good lines: 147. 8232 of 8379 lines rejected due to line profile fit.
[ INFO  ] giwavecalibration: Fit of the line profile PSF width variation.
[ INFO  ] giwavecalibration: Chebyshev polynomial order is (2, 2).
[ INFO  ] giwavecalibration: Sigma clipping: iterations = 10, level = 1.2500, fraction = 0.9000
[ INFO  ] giwavecalibration: Number of good lines: 146. 1 of 147 lines rejected due to line profile PSF width fit.
[ INFO  ] giwavecalibration: Optical model fit setup: iterations = 50, tests = 7, delta = 0.0001
[ INFO  ] giwavecalibration: Optical model parameters:
[ INFO  ] giwavecalibration: Initial: focal length = 956.908146, camera magnification = 0.370107, grating angle = 0.608586643, slit x-shift = -85.602982444, slit y-shift = -0.464796101, slit rotation = -0.000133277
[ INFO  ] giwavecalibration:  Fitted: focal length = 956.908146, camera magnification = 0.370107, grating angle = 0.608586643, slit x-shift = -85.525935103, slit y-shift = -8.800660226, slit rotation = -0.000280787
[ INFO  ] giwavecalibration:   Sigma: focal length = 0.000000, camera magnification = 0.000000, grating angle = 0.000000000, slit x-shift = 0.000314235, slit y-shift = 0.021706461, slit rotation = 0.000000356
[ INFO  ] giwavecalibration:  Status: focal length = frozen, camera magnification = frozen, grating angle = frozen, slit x-shift = free, slit y-shift = free, slit rotation = free
[ INFO  ] giwavecalibration: Optical model fit statistics: iterations = 16, DoF = 143, Chi-square = 6.80272e+06, Chi-square/DoF = 47571.4, R-square = 0.958963
[ INFO  ] giwavecalibration: Re-computing line positions with updated optical model
[ INFO  ] giwavecalibration: Average RMS [pxl] of line positions using 146 of 8379 lines: 1.8158
[ INFO  ] giwavecalibration: Fit of the wavelength solution coefficients using 146 lines
[ INFO  ] giwavecalibration: Chebyshev polynomial order is (6, 4).
[ INFO  ] giwavecalibration: Sigma clipping: iterations = 10, level = 150.0000, fraction = 0.9000
[ INFO  ] giwavecalibration: Number of good lines: 146. 0 of 146 lines rejected due to wavelength solution coefficients fit.
[ INFO  ] giwavecalibration: Average RMS [pxl] of line positions using 146 of 8379 lines: 0.0846
[ INFO  ] giwavecalibration: Current search window width: 10 pxl
[ INFO  ] giwavecalibration: Applying crowding criterium to line list.
[ INFO  ] giwavecalibration: 63 lines used for fit. 17 of 80 lines rejected due to crowding and line quality.
[ INFO  ] giwavecalibration: Fitting 63 line profiles for 133 spectra using line model `psfexp'
[ INFO  ] giwavecalibration: Total number of lines to fit: 8379  (133 x 63)
[ INFO  ] giwavecalibration: Number of good lines: 272. 8107 of 8379 lines rejected due to line profile fit.
[ INFO  ] giwavecalibration: Fit of the line profile PSF width variation.
[ INFO  ] giwavecalibration: Chebyshev polynomial order is (2, 2).
[ INFO  ] giwavecalibration: Sigma clipping: iterations = 10, level = 1.2500, fraction = 0.9000
[ INFO  ] giwavecalibration: Number of good lines: 270. 2 of 272 lines rejected due to line profile PSF width fit.
[ INFO  ] giwavecalibration: Optical model fit setup: iterations = 50, tests = 7, delta = 0.0001
[ INFO  ] giwavecalibration: Optical model parameters:
[ INFO  ] giwavecalibration: Initial: focal length = 956.908146, camera magnification = 0.370107, grating angle = 0.608586643, slit x-shift = -85.525935103, slit y-shift = -8.800660226, slit rotation = -0.000280787
[ INFO  ] giwavecalibration:  Fitted: focal length = 956.908146, camera magnification = 0.370107, grating angle = 0.608586643, slit x-shift = -85.153575437, slit y-shift = -23.385235542, slit rotation = -0.000533181
[ INFO  ] giwavecalibration:   Sigma: focal length = 0.000000, camera magnification = 0.000000, grating angle = 0.000000000, slit x-shift = 0.000328402, slit y-shift = 0.009027866, slit rotation = 0.000000148
[ INFO  ] giwavecalibration:  Status: focal length = frozen, camera magnification = frozen, grating angle = frozen, slit x-shift = free, slit y-shift = free, slit rotation = free
[ INFO  ] giwavecalibration: Optical model fit statistics: iterations = 24, DoF = 267, Chi-square = 1.03516e+07, Chi-square/DoF = 38770, R-square = 0.972258
[ INFO  ] giwavecalibration: Re-computing line positions with updated optical model
[ INFO  ] giwavecalibration: Average RMS [pxl] of line positions using 270 of 8379 lines: 1.3413
[ INFO  ] giwavecalibration: Fit of the wavelength solution coefficients using 270 lines
[ INFO  ] giwavecalibration: Chebyshev polynomial order is (6, 4).
[ INFO  ] giwavecalibration: Sigma clipping: iterations = 10, level = 150.0000, fraction = 0.9000
[ INFO  ] giwavecalibration: Number of good lines: 270. 0 of 270 lines rejected due to wavelength solution coefficients fit.
[ INFO  ] giwavecalibration: Average RMS [pxl] of line positions using 270 of 8379 lines: 0.0958
[ INFO  ] giwavecalibration: Current search window width: 10 pxl
[ INFO  ] giwavecalibration: Applying crowding criterium to line list.
[ INFO  ] giwavecalibration: 63 lines used for fit. 17 of 80 lines rejected due to crowding and line quality.
[ INFO  ] giwavecalibration: Fitting 63 line profiles for 133 spectra using line model `psfexp'
[ INFO  ] giwavecalibration: Total number of lines to fit: 8379  (133 x 63)
[ INFO  ] giwavecalibration: Number of good lines: 1531. 6848 of 8379 lines rejected due to line profile fit.
[ INFO  ] giwavecalibration: Fit of the line profile PSF width variation.
[ INFO  ] giwavecalibration: Chebyshev polynomial order is (2, 2).
[ INFO  ] giwavecalibration: Sigma clipping: iterations = 10, level = 1.2500, fraction = 0.9000
[ INFO  ] giwavecalibration: Number of good lines: 1439. 92 of 1531 lines rejected due to line profile PSF width fit.
[ INFO  ] giwavecalibration: Optical model fit setup: iterations = 50, tests = 7, delta = 0.0001
[ INFO  ] giwavecalibration: Optical model parameters:
[ INFO  ] giwavecalibration: Initial: focal length = 956.908146, camera magnification = 0.370107, grating angle = 0.608586643, slit x-shift = -85.153575437, slit y-shift = -23.385235542, slit rotation = -0.000533181
[ INFO  ] giwavecalibration:  Fitted: focal length = 956.908146, camera magnification = 0.370107, grating angle = 0.608586643, slit x-shift = -85.061904136, slit y-shift = -23.382693715, slit rotation = -0.000519378
[ INFO  ] giwavecalibration:   Sigma: focal length = 0.000000, camera magnification = 0.000000, grating angle = 0.000000000, slit x-shift = 0.000073473, slit y-shift = 0.002137038, slit rotation = 0.000000034
[ INFO  ] giwavecalibration:  Status: focal length = frozen, camera magnification = frozen, grating angle = frozen, slit x-shift = free, slit y-shift = free, slit rotation = free
[ INFO  ] giwavecalibration: Optical model fit statistics: iterations = 12, DoF = 1436, Chi-square = 5.52803e+07, Chi-square/DoF = 38496.1, R-square = 0.966725
[ INFO  ] giwavecalibration: Re-computing line positions with updated optical model
[ INFO  ] giwavecalibration: Average RMS [pxl] of line positions using 1439 of 8379 lines: 1.6684
[ INFO  ] giwavecalibration: Fit of the wavelength solution coefficients using 1439 lines
[ INFO  ] giwavecalibration: Chebyshev polynomial order is (6, 4).
[ INFO  ] giwavecalibration: Sigma clipping: iterations = 10, level = 150.0000, fraction = 0.9000
[ INFO  ] giwavecalibration: Number of good lines: 1397. 42 of 1439 lines rejected due to wavelength solution coefficients fit.
[ INFO  ] giwavecalibration: Average RMS [pxl] of line positions using 1397 of 8379 lines: 0.1526
[ INFO  ] giwavecalibration: Current search window width: 10 pxl
[ INFO  ] giwavecalibration: Applying crowding criterium to line list.
[ INFO  ] giwavecalibration: 63 lines used for fit. 17 of 80 lines rejected due to crowding and line quality.
[ INFO  ] giwavecalibration: Fitting 63 line profiles for 133 spectra using line model `psfexp'
[ INFO  ] giwavecalibration: Total number of lines to fit: 8379  (133 x 63)
[ INFO  ] giwavecalibration: Number of good lines: 3233. 5146 of 8379 lines rejected due to line profile fit.
[ INFO  ] giwavecalibration: Fit of the line profile PSF width variation.
[ INFO  ] giwavecalibration: Chebyshev polynomial order is (2, 2).
[ INFO  ] giwavecalibration: Sigma clipping: iterations = 10, level = 1.2500, fraction = 0.9000
[ INFO  ] giwavecalibration: Number of good lines: 3160. 73 of 3233 lines rejected due to line profile PSF width fit.
[ INFO  ] giwavecalibration: Optical model fit setup: iterations = 50, tests = 7, delta = 0.0001
[ INFO  ] giwavecalibration: Optical model parameters:
[ INFO  ] giwavecalibration: Initial: focal length = 956.908146, camera magnification = 0.370107, grating angle = 0.608586643, slit x-shift = -85.061904136, slit y-shift = -23.382693715, slit rotation = -0.000519378
[ INFO  ] giwavecalibration:  Fitted: focal length = 956.908146, camera magnification = 0.370107, grating angle = 0.608586643, slit x-shift = -85.026199184, slit y-shift = -21.905025386, slit rotation = -0.000474487
[ INFO  ] giwavecalibration:   Sigma: focal length = 0.000000, camera magnification = 0.000000, grating angle = 0.000000000, slit x-shift = 0.000054891, slit y-shift = 0.001733090, slit rotation = 0.000000027
[ INFO  ] giwavecalibration:  Status: focal length = frozen, camera magnification = frozen, grating angle = frozen, slit x-shift = free, slit y-shift = free, slit rotation = free
[ INFO  ] giwavecalibration: Optical model fit statistics: iterations = 15, DoF = 3157, Chi-square = 1.34602e+08, Chi-square/DoF = 42636, R-square = 0.969784
[ INFO  ] giwavecalibration: Re-computing line positions with updated optical model
[ INFO  ] giwavecalibration: Average RMS [pxl] of line positions using 3160 of 8379 lines: 1.0686
[ INFO  ] giwavecalibration: Fit of the wavelength solution coefficients using 3160 lines
[ INFO  ] giwavecalibration: Chebyshev polynomial order is (6, 4).
[ INFO  ] giwavecalibration: Sigma clipping: iterations = 10, level = 150.0000, fraction = 0.9000
[ INFO  ] giwavecalibration: Number of good lines: 3160. 0 of 3160 lines rejected due to wavelength solution coefficients fit.
[ INFO  ] giwavecalibration: Average RMS [pxl] of line positions using 3160 of 8379 lines: 0.1414
[ INFO  ] giwavecalibration: Current search window width: 10 pxl
[ INFO  ] giwavecalibration: Applying crowding criterium to line list.
[ INFO  ] giwavecalibration: 63 lines used for fit. 17 of 80 lines rejected due to crowding and line quality.
[ INFO  ] giwavecalibration: Fitting 63 line profiles for 133 spectra using line model `psfexp'
[ INFO  ] giwavecalibration: Total number of lines to fit: 8379  (133 x 63)
[ INFO  ] giwavecalibration: Number of good lines: 7873. 506 of 8379 lines rejected due to line profile fit.
[ INFO  ] giwavecalibration: Fit of the line profile PSF width variation.
[ INFO  ] giwavecalibration: Chebyshev polynomial order is (2, 2).
[ INFO  ] giwavecalibration: Sigma clipping: iterations = 10, level = 1.2500, fraction = 0.9000
[ INFO  ] giwavecalibration: Number of good lines: 7656. 217 of 7873 lines rejected due to line profile PSF width fit.
[ INFO  ] giwavecalibration: Optical model fit setup: iterations = 50, tests = 7, delta = 0.0001
[ INFO  ] giwavecalibration: Optical model parameters:
[ INFO  ] giwavecalibration: Initial: focal length = 956.908146, camera magnification = 0.370107, grating angle = 0.608586643, slit x-shift = -85.026199184, slit y-shift = -21.905025386, slit rotation = -0.000474487
[ INFO  ] giwavecalibration:  Fitted: focal length = 956.908146, camera magnification = 0.370107, grating angle = 0.608586643, slit x-shift = -85.132635935, slit y-shift = -16.745637240, slit rotation = -0.000381307
[ INFO  ] giwavecalibration:   Sigma: focal length = 0.000000, camera magnification = 0.000000, grating angle = 0.000000000, slit x-shift = 0.000042967, slit y-shift = 0.001762837, slit rotation = 0.000000028
[ INFO  ] giwavecalibration:  Status: focal length = frozen, camera magnification = frozen, grating angle = frozen, slit x-shift = free, slit y-shift = free, slit rotation = free
[ INFO  ] giwavecalibration: Optical model fit statistics: iterations = 17, DoF = 7653, Chi-square = 1.87413e+08, Chi-square/DoF = 24488.8, R-square = 0.977221
[ INFO  ] giwavecalibration: Re-computing line positions with updated optical model
[ INFO  ] giwavecalibration: Average RMS [pxl] of line positions using 7656 of 8379 lines: 0.9454
[ INFO  ] giwavecalibration: Fit of the wavelength solution coefficients using 7656 lines
[ INFO  ] giwavecalibration: Chebyshev polynomial order is (6, 4).
[ INFO  ] giwavecalibration: Sigma clipping: iterations = 10, level = 150.0000, fraction = 0.9000
[ INFO  ] giwavecalibration: Number of good lines: 7655. 1 of 7656 lines rejected due to wavelength solution coefficients fit.
[ INFO  ] giwavecalibration: Average RMS [pxl] of line positions using 7655 of 8379 lines: 0.1587
[ INFO  ] giwavecalibration: Recipe Step : Spectrum Rebinning
[ INFO  ] giwavecalibration: Performing Rebinning of spectra, stepsize=0.0200 [nm], resulting image size=2896, using x residuals : Yes
[ INFO  ] giwavecalibration: Rebinning method    : linear
[ INFO  ] giwavecalibration: Scaling method      : linear, wavelength [nm]: min,max,range = 449.900, 507.800, 57.900
[ INFO  ] giwavecalibration: Wavelength range    : Setup
[ INFO  ] giwavecalibration: Computing QC1 parameters ...
[ INFO  ] giwavecalibration: Processing reference frame 'Data/Runs/106.219R.001/GIRAF.2021-01-17T10:48:36.132.fits' (ARC_SPECTRUM)
[ INFO  ] giwavecalibration: Processing product frame 'dispersion_solution.fits' (DISPERSION_SOLUTION)
[ INFO  ] giwavecalibration: Processing product frame 'arc_rbnspectra.fits' (ARC_RBNSPECTRA)
[ INFO  ] giwavecalibration: Processing product frame 'line_data.fits' (LINE_DATA)
[ INFO  ] esorex: Calculating product checksums
[WARNING] esorex: Product final output path file already exists and will be overwritten (/home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/arc_extspectra.fits)
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/arc_extspectra.fits
[WARNING] esorex: Product final output path file already exists and will be overwritten (/home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/arc_exterrors.fits)
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/arc_exterrors.fits
[WARNING] esorex: Product final output path file already exists and will be overwritten (/home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/arc_extpixels.fits)
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/arc_extpixels.fits
[WARNING] esorex: Product final output path file already exists and will be overwritten (/home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/arc_exttraces.fits)
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/arc_exttraces.fits
[WARNING] esorex: Product final output path file already exists and will be overwritten (/home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/dispersion_solution.fits)
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/dispersion_solution.fits
[WARNING] esorex: Product final output path file already exists and will be overwritten (/home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/line_data.fits)
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/line_data.fits
[WARNING] esorex: Product final output path file already exists and will be overwritten (/home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/arc_rbnspectra.fits)
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/arc_rbnspectra.fits
[WARNING] esorex: Product final output path file already exists and will be overwritten (/home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/arc_rbnerrors.fits)
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/pipe_products/arc_rbnerrors.fits
[ INFO  ] esorex: 8 products created
[ INFO  ] esorex: Recipe operation(s) took           10.1 seconds to complete.
[ INFO  ] esorex: Size of single raw input frame  =    17.82 MB

[ INFO  ] esorex: => processing rate of     1.76 MB/sec 

#+end_example

*** Wavecal QC
#+BEGIN_SRC jupyter-python :session pipeline :cache nil
  linedata = fits.open("./Data/Runs/106.219R.001/pipe_products/line_data.fits")
  linewls = linedata["LINES"].data
  lineflags = linedata["LINE_FLAGS"].data
  lineamps = linedata["Amplitude"].data
  filldata = linedata["Center"].data
  fig, ax = subplots(1, 1, dpi=200)
  # flags = ax.matshow((filldata), cmap='cubehelix')
  fibers = arange(133)
  for l in arange(63):
      plot(fibers, filldata[l, :], 'k-', zorder=1)
  fibers2d = atleast_2d(fibers).repeat(63, axis=0)
  wls = scatter(fibers2d, filldata, c=linewls.reshape(-1, 1).repeat(133, axis=1), cmap='rainbow', zorder=2)
  fig.colorbar(wls, orientation="vertical")
#+END_SRC

#+RESULTS[da22a7592deca49d21110f20a778ffb50b45b6d2]:
: <matplotlib.colorbar.Colorbar at 0x7f0c6fde9850>

** DONE SCIENCE!!!
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-09-23 Thu 14:41]
- State "NEXT"       from              [2021-09-10 Fri 13:59]
:END:
*** Make ~.sof~ 's

#+BEGIN_SRC jupyter-python :session pipeline :results drawer :cache nil :var runID=runID OBs=OBs 
  def make_science_sof(runID, OB="_all"):
      dfits = "dfits Data/Runs/{}/*.fits".format(runID)
      sorts = "fitsort DPR.TYPE DPR.CATG PRO.CATG OBS.NAME"
      grep1 = f"grep -i SCIENCE | grep -i {OB}"
      print(grep1)
      filename = f"Data/Runs/{runID}/6_science_{OB}.sof"
      commandstring = " | ".join([dfits, sorts, grep1])
      dfits1 = subprocess.getoutput(commandstring)
      dfits1 = dfits1.strip().split('\n')#[:-1]
      pdir = f'Data/Runs/{runID}/pipe_products/' 
      FFdict = {
          "FF_LOCCENTROID": pdir+"ff_loccentroid.fits",
          "FF_PSFCENTROID": pdir+"ff_psfcentroid.fits",
          "FF_LOCWIDTH": pdir+"ff_locwidth.fits",
          "FF_PSFWIDTH": pdir+"ff_psfwidth.fits",
          "FF_EXTSPECTRA": pdir+"ff_extspectra.fits",
          "FF_EXTERRORS": pdir+"ff_exterrors.fits",
      }
  
      platenocomm = " | ".join([dfits, sorts+" INS.OBSPLATE", "grep OzPoz"])
      platenlist = subprocess.getoutput(platenocomm)
      plateno = unique([int(r.split()[-1]) for r in platenlist.split("\n")])[0]
      comst5 = " | ".join([dfits, sorts, "grep SLIT_GEOMETRY_SETUP"])
      sligeo = subprocess.getoutput(comst5)
      # sligem = "/home/trive/Software/ESO/install/calib/giraf-2.16.8/slit_geometry_medusa{}.fits".format(plateno)
  
      comst6 = " | ".join([dfits, sorts, "grep GRATING_DATA"])
      gratda = subprocess.getoutput(comst6)
  
      comst3 = " | ".join([dfits, sorts, "grep LINE_MASK"])
      lima = subprocess.getoutput(comst3)
  
      with open(filename, "w") as outfile:
          for r in dfits1:
              outline = r.split()[0]+"\tSCIENCE\n"
              outfile.write(outline)
          outfile.write("Data/Runs/{}/pipe_products/bad_pixel_map.fits\tBAD_PIXEL_MAP\n".format(runID))
          outfile.write("Data/Runs/{}/pipe_products/master_bias.fits\tMASTER_BIAS\n".format(runID))
          outfile.write("Data/Runs/{}/pipe_products/fiber_profile.fits\tFIBER_PROFILE\n".format(runID))
          for r in FFdict.keys():
              outline = FFdict[r] + "\t" + r + "\n"
              outfile.write(outline)
          outfile.write("Data/Runs/{}/pipe_products/dispersion_solution.fits\tDISPERSION_SOLUTION\n".format(runID))
          # outfile.write(sligeo+"\t"+"SLIT_GEOMETRY_SETUP"+"\n")
          outfile.write("\t".join([sligeo.split()[0], sligeo.split()[1]])+"\n")
          outfile.write("\t".join([gratda.split()[0], gratda.split()[1]])+"\n")
          outfile.write("\t".join([lima.split()[0], lima.split()[1]])+"\n")
      return
  
  # xx = make_science_sof(runID)
  for OB in OBs:
      xx = make_science_sof(runID, OB=OB)
#+END_SRC

#+RESULTS:
:results:
: grep -i SCIENCE | grep -i GOODSS_F3_3
: grep -i SCIENCE | grep -i GOODSS_F3_2
:end:

*** DONE Run esorex recipe /with OPTIMAL extraction/
:LOGBOOK:
- State "DONE"       from "PROG"       [2021-09-23 Thu 14:41]
:END:
#+name: esorexbash
#+header: :shebang #! /bin/bash -i :dir ~/Arbejde/AAB-LyaFLAMES/
#+begin_src bash :results ouput org :var RUN=runID OBs=OBs
  for OB in ${OBs[@]}; do
    DIRPATH="./Data/Runs/$RUN/science_products/$OB"
    [ ! -d $DIRPATH ] && mkdir $DIRPATH && echo "Created dir" || echo "It was alredy there!"
    echo $DIRPATH
    esorex --output-dir=$DIRPATH giscience --generate-SDP-format=true --extr-method=OPTIMAL ./Data/Runs/$RUN/6_science_$OB.sof
  done
#+end_src

#+RESULTS: esorexbash
#+begin_src org
It was alredy there!
./Data/Runs/106.219R.001/science_products/GOODSS_F3_3

     ,***** ESO Recipe Execution Tool, version 3.13.5  *****

[ INFO  ] giscience: No master dark present in frame set.
[ INFO  ] giscience: No scattered light model present in frame set.
[ INFO  ] giscience: Averaging science frames ...
[ INFO  ] giscience: Updating stacked science image properties ...
[ INFO  ] giscience: Using bias area(s) '5:40:0:4095' for bias computation
[ INFO  ] giscience: Bias correction will be done.
[ INFO  ] giscience: Using bias model 'PLANE (FITTED)' ...
[ INFO  ] giscience: Bias Areas: specified are 147456 points in 2148x4096 image
[ INFO  ] giscience: Bias Areas: Using 5:40:0:4095; [147456 pixels]
[ INFO  ] giscience: Sigma Clipping : Start
[ INFO  ] giscience: Sigma Clipping : bias plane[0]: 240.248 + -0.000462972 * x + 0.000329434 * y, sigma = 1.2563, ratio = 1, accepted = 147456

[ INFO  ] giscience: Sigma Clipping : bias plane[1]: 240.261 + -0.000387862 * x + 0.000324993 * y, sigma = 1.2022, ratio = 0.9882, accepted = 145709

[ INFO  ] giscience: Sigma Clipping : bias plane[2]: 240.256 + -0.000383865 * x + 0.00032754 * y, sigma = 1.1876, ratio = 0.9838, accepted = 145072

[ INFO  ] giscience: Sigma Clipping : bias plane[3]: 240.253 + -0.000370452 * x + 0.00032878 * y, sigma = 1.1832, ratio = 0.9825, accepted = 144872

[ INFO  ] giscience: Sigma Clipping : bias plane[4]: 240.252 + -0.000349154 * x + 0.000329205 * y, sigma = 1.1818, ratio = 0.982, accepted = 144805

[ INFO  ] giscience: Sigma Clipping : End
[ INFO  ] giscience: Sigma Clipping Results (5/144780, sigma = 1.18176)
[ INFO  ] giscience: Using bias method 'PROFILE'
[ INFO  ] giscience: Bias Areas: Found 147456 points in 2148x4096 image
[ INFO  ] giscience: Resulting biaslimits : 5:40:0:4095;
[ INFO  ] giscience: Writing pre-processed science image ...
[ INFO  ] giscience: Building fiber setup for frame 'Data/Runs/106.219R.001/GIRAF.2021-01-17T02:18:19.127.fits'.
[WARNING] giscience: Data/Runs/106.219R.001/GIRAF.2021-01-17T02:18:19.127.fits: Properties (ESO INS LAMP4 ST, ESO INS LAMP5 ST) not found! Simultaneous calibration lamps assumed to be off!
[ INFO  ] giscience: Fiber reference setup taken from localization frame 'Data/Runs/106.219R.001/pipe_products/ff_psfcentroid.fits'.
[WARNING] giscience: Missing dark value property (ESO PRO DARK VALUE), will be set to 0.!
[ INFO  ] giscience: Applying flat field correction ...
[ INFO  ] giscience: Writing extracted spectra ...
[ INFO  ] giscience: Spectrum rebinning
[ INFO  ] giscience: Performing Rebinning of spectra, stepsize=0.0200 [nm], resulting image size=2896, using x residuals : Yes
[ INFO  ] giscience: Rebinning method    : linear
[ INFO  ] giscience: Scaling method      : linear, wavelength [nm]: min,max,range = 449.900, 507.800, 57.900
[ INFO  ] giscience: Wavelength range    : Setup
[ INFO  ] esorex: Calculating product checksums
[WARNING] esorex: Product final output path file already exists and will be overwritten (/home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_reduced.fits)
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_reduced.fits
[WARNING] esorex: Product final output path file already exists and will be overwritten (/home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_extspectra.fits)
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_extspectra.fits
[WARNING] esorex: Product final output path file already exists and will be overwritten (/home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_exterrors.fits)
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_exterrors.fits
[WARNING] esorex: Product final output path file already exists and will be overwritten (/home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_exttraces.fits)
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_exttraces.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_extmodel.fits
[WARNING] esorex: Product final output path file already exists and will be overwritten (/home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_rbnspectra.fits)
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_rbnspectra.fits
[WARNING] esorex: Product final output path file already exists and will be overwritten (/home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_rbnerrors.fits)
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_rbnerrors.fits
[WARNING] esorex: Product final output path file already exists and will be overwritten (/home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_ancillary.fits)
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_ancillary.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_001.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_002.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_003.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_004.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_005.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_006.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_007.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_008.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_009.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_010.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_011.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_012.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_013.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_014.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_015.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_016.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_017.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_018.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_019.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_020.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_021.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_022.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_023.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_024.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_025.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_026.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_027.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_028.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_029.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_030.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_031.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_032.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_033.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_034.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_035.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_036.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_037.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_038.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_039.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_040.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_041.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_042.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_043.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_044.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_045.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_046.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_047.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_048.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_049.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_050.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_051.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_052.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_053.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_054.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_055.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_056.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_057.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_058.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_059.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_060.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_061.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_062.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_063.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_064.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_065.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_066.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_067.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_068.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_069.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_070.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_071.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_072.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_073.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_074.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_075.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_076.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_077.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_078.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_079.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_080.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_081.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_082.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_083.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_084.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_085.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_086.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_087.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_088.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_089.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_090.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_091.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_092.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_093.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_094.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_095.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_096.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_097.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_098.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_099.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_100.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_101.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_102.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_103.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_104.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_105.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_106.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_107.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_108.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_109.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_110.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_111.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_3/science_spectrum_112.fits
[ INFO  ] esorex: 120 products created
[ INFO  ] esorex: Recipe operation(s) took           71.1 seconds to complete.
[ INFO  ] esorex: Total size of 2 raw input frames  =    70.90 MB

[ INFO  ] esorex: => processing rate of     1.00 MB/sec 

It was alredy there!
./Data/Runs/106.219R.001/science_products/GOODSS_F3_2

     ,***** ESO Recipe Execution Tool, version 3.13.5  *****

[ INFO  ] giscience: No master dark present in frame set.
[ INFO  ] giscience: No scattered light model present in frame set.
[ INFO  ] giscience: Averaging science frames ...
[ INFO  ] giscience: Updating stacked science image properties ...
[ INFO  ] giscience: Using bias area(s) '5:40:0:4095' for bias computation
[ INFO  ] giscience: Bias correction will be done.
[ INFO  ] giscience: Using bias model 'PLANE (FITTED)' ...
[ INFO  ] giscience: Bias Areas: specified are 147456 points in 2148x4096 image
[ INFO  ] giscience: Bias Areas: Using 5:40:0:4095; [147456 pixels]
[ INFO  ] giscience: Sigma Clipping : Start
[ INFO  ] giscience: Sigma Clipping : bias plane[0]: 240.185 + 0.000214542 * x + 0.000340789 * y, sigma = 1.2537, ratio = 1, accepted = 147456

[ INFO  ] giscience: Sigma Clipping : bias plane[1]: 240.197 + 9.09028e-05 * x + 0.000338194 * y, sigma = 1.198, ratio = 0.9877, accepted = 145649

[ INFO  ] giscience: Sigma Clipping : bias plane[2]: 240.189 + 0.000141482 * x + 0.000341287 * y, sigma = 1.1833, ratio = 0.9834, accepted = 145009

[ INFO  ] giscience: Sigma Clipping : bias plane[3]: 240.186 + 0.000143152 * x + 0.000342759 * y, sigma = 1.1783, ratio = 0.9818, accepted = 144779

[ INFO  ] giscience: Sigma Clipping : bias plane[4]: 240.185 + 0.000153407 * x + 0.000343193 * y, sigma = 1.1768, ratio = 0.9814, accepted = 144710

[ INFO  ] giscience: Sigma Clipping : End
[ INFO  ] giscience: Sigma Clipping Results (5/144688, sigma = 1.17684)
[ INFO  ] giscience: Using bias method 'PROFILE'
[ INFO  ] giscience: Bias Areas: Found 147456 points in 2148x4096 image
[ INFO  ] giscience: Resulting biaslimits : 5:40:0:4095;
[ INFO  ] giscience: Writing pre-processed science image ...
[ INFO  ] giscience: Building fiber setup for frame 'Data/Runs/106.219R.001/GIRAF.2021-01-17T01:26:09.801.fits'.
[WARNING] giscience: Data/Runs/106.219R.001/GIRAF.2021-01-17T01:26:09.801.fits: Properties (ESO INS LAMP4 ST, ESO INS LAMP5 ST) not found! Simultaneous calibration lamps assumed to be off!
[ INFO  ] giscience: Fiber reference setup taken from localization frame 'Data/Runs/106.219R.001/pipe_products/ff_psfcentroid.fits'.
[WARNING] giscience: Missing dark value property (ESO PRO DARK VALUE), will be set to 0.!
[ INFO  ] giscience: Applying flat field correction ...
[ INFO  ] giscience: Writing extracted spectra ...
[ INFO  ] giscience: Spectrum rebinning
[ INFO  ] giscience: Performing Rebinning of spectra, stepsize=0.0200 [nm], resulting image size=2896, using x residuals : Yes
[ INFO  ] giscience: Rebinning method    : linear
[ INFO  ] giscience: Scaling method      : linear, wavelength [nm]: min,max,range = 449.900, 507.800, 57.900
[ INFO  ] giscience: Wavelength range    : Setup
[ INFO  ] esorex: Calculating product checksums
[WARNING] esorex: Product final output path file already exists and will be overwritten (/home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_reduced.fits)
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_reduced.fits
[WARNING] esorex: Product final output path file already exists and will be overwritten (/home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_extspectra.fits)
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_extspectra.fits
[WARNING] esorex: Product final output path file already exists and will be overwritten (/home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_exterrors.fits)
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_exterrors.fits
[WARNING] esorex: Product final output path file already exists and will be overwritten (/home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_exttraces.fits)
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_exttraces.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_extmodel.fits
[WARNING] esorex: Product final output path file already exists and will be overwritten (/home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_rbnspectra.fits)
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_rbnspectra.fits
[WARNING] esorex: Product final output path file already exists and will be overwritten (/home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_rbnerrors.fits)
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_rbnerrors.fits
[WARNING] esorex: Product final output path file already exists and will be overwritten (/home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_ancillary.fits)
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_ancillary.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_001.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_002.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_003.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_004.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_005.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_006.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_007.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_008.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_009.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_010.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_011.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_012.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_013.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_014.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_015.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_016.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_017.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_018.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_019.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_020.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_021.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_022.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_023.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_024.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_025.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_026.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_027.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_028.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_029.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_030.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_031.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_032.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_033.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_034.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_035.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_036.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_037.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_038.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_039.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_040.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_041.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_042.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_043.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_044.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_045.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_046.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_047.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_048.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_049.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_050.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_051.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_052.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_053.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_054.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_055.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_056.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_057.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_058.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_059.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_060.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_061.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_062.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_063.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_064.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_065.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_066.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_067.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_068.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_069.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_070.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_071.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_072.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_073.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_074.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_075.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_076.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_077.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_078.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_079.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_080.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_081.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_082.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_083.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_084.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_085.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_086.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_087.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_088.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_089.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_090.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_091.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_092.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_093.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_094.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_095.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_096.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_097.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_098.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_099.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_100.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_101.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_102.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_103.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_104.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_105.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_106.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_107.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_108.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_109.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_110.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_111.fits
[ INFO  ] esorex: Created product /home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/GOODSS_F3_2/science_spectrum_112.fits
[ INFO  ] esorex: 120 products created
[ INFO  ] esorex: Recipe operation(s) took           72.8 seconds to complete.
[ INFO  ] esorex: Total size of 2 raw input frames  =    70.90 MB

[ INFO  ] esorex: => processing rate of     0.97 MB/sec 

#+end_src


**** DONE Figure out why this doesn't work
:LOGBOOK:
- State "DONE"       from "WAIT"       [2021-09-23 Thu 14:31]
- State "WAIT"       from              [2021-09-21 Tue 17:18]
:END:

Because it required the =fiber_profile.fits= file to work, which was not
listed in the pipeline manual. Adding that, it worked!
*** DONE Rename 1D spectra
:LOGBOOK:
- State "DONE"       from              [2021-09-18 Sat 23:21]
:END:
#+BEGIN_SRC jupyter-python :session pipeline :var runID=runID OBs=OBs
  onedeepaths = []
  objnames = []
  for OB in OBs:
      folderpath = f"./Data/Runs/{runID}/science_products/{OB}/"
      onedeepaths.append(glob.glob(folderpath+"science_spectrum_*.fits"))
  onedeepaths = concatenate(onedeepaths)
  for p in onedeepaths:
      objname = fits.getheader(p)['OBJECT']
      objnames.append(objname)
      newpath = "/".join(p.split("/")[:-1])+f"/{objname}_1D.fits"
      if os.path.exists(p):
          shutil.move(p, newpath)
#+END_SRC

#+RESULTS[8c8d14343998b2692d879f121b8cf19d2a25c033]:
  
#+BEGIN_SRC jupyter-python :session pipeline :var runID=runID OBs=OBs
  for thing in objnames:
      dfs = []
      for OB in OBs:
          folderpath = f"Data/Runs/{runID}/science_products/{OB}/"
          stackpath = f"Data/Runs/{runID}/science_products/stacks/"
          thingpath = f"{folderpath}{thing}_1D.fits"
          sp = fits.getdata(n, 1)
          sdict = {m: sp[m].flatten() for m in sp.columns.names}
          sdf = pd.DataFrame.from_dict(sdict)
          sdf["WAVE"] *= 10
          sdf.columns = ['wave', 'flux', 'std', 'snr']
          dfs.append(sdf)
          st = Table.from_pandas(sdf)
          st["wave"] *= u.AA
          st["flux"] *= u.adu
          st["std"] *= u.adu
          st.write(f"{folderpath}{thing}_1D.ecsv", overwrite=True)
      stackdf = dfs[0].copy()
      stackdf['flux'] = vstack([a['flux'] for a in dfs]).sum(axis=0)
      stds = vstack([a['std']**2 for a in dfs])
      stackdf["std"] = sqrt(stds.sum(0))
      stackdf['snr'] = stackdf['flux'] / stackdf['std']
      stackt = Table.from_pandas(stackdf)
      stackt["wave"] *= u.AA
      stackt["flux"] *= u.adu
      stackt["std"] *= u.adu
      stackt.write(f"{stackpath}{thing}_1D.ecsv", overwrite=True)
#+END_SRC

#+RESULTS[edca2d85bc109fc09b5472962bb10601ce2538e4]:

* DONE Check pipeline products
:LOGBOOK:
- State "DONE"       from "PROG"       [2021-09-23 Thu 15:25]
- State "PROG"       from "TODO"       [2021-09-18 Sat 23:19]
- State "NEXT"       from              [2021-09-01 Wed 16:57]
:END:
** DONE Wavelength calibration
:LOGBOOK:
- State "DONE"       from "TODO"       [2021-09-18 Sat 23:19]
- State "NEXT"       from "TODO"       [2021-09-02 Thu 19:08]
:END:
** DONE Acquisition quick-look 
:LOGBOOK:
- State "DONE"       from "TODO"       [2021-09-03 Fri 13:27]
CLOCK: [2021-09-03 Fri 13:00]--[2021-09-03 Fri 13:27] =>  0:27
:END:
The acquisition for the two OBs of the initial run I have been working
on. Looking at the acquisition to see if there is any way I can tell
if the fibres are perhaps off-center. The problem is I don't really
know what I am looking at and how to interpret it but here it is
anyway.

Looks to me like there are acrually some real offsets in some of them,
but only in 1 or perhaps 2 bundles per image, and the distance is not
quite large enough to account for the lack of emission we are getting
in - the fibre bundles in the Acq frame are each 2.5" across, the
fibres in the MEDUSA system are 1.2" across. 

But how do I know whether the stuff we see means something or not? I
may have to let that one cook for a bit.

#+attr_org: :width 800px
[[file:org-download/2021-09-03_13-12-58_screenshot.png]]

OK according to the [[file:Docs/VLT-MAN-ESO-13700-2994_p95.pdf][manual]], the acquisition thingie calculates the
centroids of the stars for each frame and use that to map the
detector coordinates to sky positions, so this frame doesn't show
much. However, they DO show that at least one star for each frame is
very faint and may potentially have screwed up the fine tuning of the
positioning. At least, my untrained eye things so. But that might be
embarrassingly wrong, who knows. 
** DONE Check the science frames when OPTIMAL extracted
:LOGBOOK:
- State "DONE"       from "PROG"       [2021-09-23 Thu 15:25]
- State "PROG"       from "TODO"       [2021-09-23 Thu 14:40]
:END:
* DONE Understanding data
:LOGBOOK:
- State "DONE"       from "PROG"       [2021-09-23 Thu 15:25]
- State "PROG"       from              [2021-08-31 Tue 17:26]
:END:
** Preview data
:LOGBOOK:
CLOCK: [2021-09-02 Thu 14:00]--[2021-09-02 Thu 19:09] =>  5:09
CLOCK: [2021-09-02 Thu 10:11]--[2021-09-02 Thu 12:15] =>  2:04
CLOCK: [2021-08-17 Tue 21:42]--[2021-08-18 Wed 01:17] =>  3:35
:END:

Kind of a sandbox kind of place, not to be super structured.

*** Imports and setup                                            :exploration:

#+BEGIN_SRC jupyter-python :session default :results silent
  %pylab
  
  import glob
  from astropy.io import fits
  from astropy.table import Table, vstack
  from spectools.spectools import GalaxySpectrum, SpecView, SimpleFitGUI, SimpleMaskGUI
#+END_SRC

*** Load data

#+BEGIN_SRC jupyter-python :session default :cache nil
  filepath = "./Data/reduced_science_products/"
  readmepath = filepath + "README_647312.txt"
  
  readme = open(readmepath, 'r')
  lines = readme.readlines()
  datafiles = {}
  for l in lines:
      if "SCIENCE.SPECTRUM" in l: 
          filename = l.split("\t")[1].split()[1]
          objname = fits.getheader(filepath+filename)["OBJECT"]
          print("Bingo!", filename, l.split("\t")[-2], objname)
          datafiles[objname] = filepath+filename
#+END_SRC

#+RESULTS[ce3691037f0021f3fdab050ba8ec251ff16f3c91]:
:RESULTS:
# [goto error]
: 
: FileNotFoundErrorTraceback (most recent call last)
: <ipython-input-2-4645fcbe42bf> in <module>
:       3 
:       4 
: ----> 5 readme = open(readmepath, 'r')
:       6 lines = readme.readlines()
:       7 datafiles = {}
: 
: FileNotFoundError: [Errno 2] No such file or directory: './Data/reduced_science_products/README_647312.txt'
:END:

*** Convert all fits files to text files
:LOGBOOK:
- State "DONE"       from "WAIT"       [2021-08-17 Tue 21:42]
- State "PROG"       from "NEXT"       [2021-08-17 Tue 21:42]
- State "NEXT"       from "TODO"       [2021-08-17 Tue 21:42]
:END:

#+BEGIN_SRC jupyter-python :session default 
  for i, f in enumerate(datafiles.keys()):
      spec = fits.getdata(datafiles[f])
      wave = spec["WAVE"].flatten() * 10.
      flux = spec["FLUX_REDUCED"].flatten()
      errs = spec["ERR_REDUCED"].flatten()
      tabl = Table(array([wave, flux, errs]).T, names=["wave", "flux", "noise"])
      tabl.write("./Data/reduced_ecsv/reduced_{}.ecsv".format(f), overwrite=True)
#+END_SRC

#+RESULTS[413eeb28fd659f82ef85793c1dcebf0cf564148a]:

*** Make list of ecsv's
#+BEGIN_SRC jupyter-python :session default :results silent
  # specdict = {k: "./Data/reduced_ecsv/reduced_{}.ecsv".format(k) for k in datafiles.keys()}
  # specdict = {k.split('_')[-1].split('.')[0]: k for k in glob.glob("./Data/reduced_ecsv/*.ecsv")}
  specdict = {k.split('/')[-1].split('_')[0]: k for k in glob.glob("./Data/Runs/106.219R.001/science_products/*.ecsv")}
#+END_SRC

*** Make grand object info pane
Just a more wieldy version of Matt's tabs. It's called ~objinfo~.

#+BEGIN_SRC jupyter-python :session default :results silent
  hlist = ["fiberID", "object", "comment", "z_Lya"]
  
  objinfo1 = Table.read('./Data/Targetinfo/GOODS_Center_F3.GIRMED.073308.targinfo.txt', format='ascii.basic')#[hlist]
  objinfo2 = Table.read('./Data/Targetinfo/GOODS_Center_F7.GIRMED.080106.targinfo.txt', format='ascii.basic')[hlist]
  objinfo3 = Table.read('./Data/Targetinfo/GOODS_Center_F8.GIRMED.083005.targinfo.txt', format='ascii.basic')[hlist]
  
  objinfo = vstack([objinfo1, objinfo2, objinfo3])
  objinfo.add_index("object")
#+END_SRC

*** Take a swing at making a more responsive GUI
:LOGBOOK:
CLOCK: [2021-08-18 Wed 10:32]--[2021-08-18 Wed 15:36] =>  5:04
CLOCK: [2021-08-17 Tue 21:41]--[2021-08-17 Tue 21:41] =>  0:00
:END:
**** Write the thing
#+BEGIN_SRC jupyter-python :session default :results silent
  class MultiSpecView(SpecView):
      """" Takes as input a dict of {objname: filepath}, 
      with the filepath being for the ECSV spectrum file.
      It can also take just a list of filepaths, or one single gile path.
      """
      _smooth_width = 1
      _current_gal = 0
      _showing_errs = False
      # Ugly hack:
      lyamark = None
  
      def __init__(self, galaxies, ax=None, data=None, label='Data', dpi=200):
          # Take over keys that Matplotlib usually uses.
          # Will be handed back in a good shape later on.
          try:  # A bit hacky but I don't want to give each its own try statement
              plt.rcParams["keymap.save"].remove("s")
              plt.rcParams["keymap.home"].remove("r")
              plt.rcParams["keymap.pan"].remove("p")
              plt.rcParams["keymap.yscale"].remove("l")
              plt.rcParams["keymap.xscale"].remove("k")
              plt.rcParams["keymap.back"].remove("left")
              plt.rcParams["keymap.forward"].remove("right")
          except ValueError:
              pass
          # Make sure that there are lists of galaxy names, filepaths,
          if type(galaxies) == dict:
              self.objnames = [n for n in galaxies.keys()]
              self.fpaths = [p for p in galaxies.values()]
          elif type(galaxies) == list:
              self.fpaths = galaxies
              self.objnames = [''] * len(galaxies)
          else:
              try:
                  self.fpaths = list(np.atleast_1d(galaxies))
                  self.objnames = [''] * len(self.fpaths)
                  print("Object lists made")
              except:
                  raise
          self.galindex = range(len(self.fpaths))
          # Select first galaxy
          galaxy = GalaxySpectrum()
          print("Galaxy object created")
          galaxy.read_data(self.fpaths[self._current_gal])
          print("Galaxy data read")
          galaxy.objname = self.objnames[self._current_gal]
          print("Galaxy name set")
          # and index numbers.
          self.data = galaxy.datatable
          self.galaxy = galaxy
          self.ref_wl = None
          self.label = label
          # Determine whether we were passed an Axes instance, or need
          # to create one.
          if ax is None:
              fig, ax = plt.subplots(1, dpi=dpi)
          # Hand the axis over to the parent object
          self.ax = ax
          # Finally, build the plot
          self.build_plot()
          self.setup_galaxy()
  
      def setup_galaxy(self):
          self.clean_plot()
          galaxy = GalaxySpectrum()
          print("Galaxy object created")
          galaxy.read_data(self.fpaths[self._current_gal])
          print("Galaxy data read")
          galaxy.objname = self.objnames[self._current_gal]
          print("Galaxy name set")
          # and index numbers.
          self.data = galaxy.datatable
          self.galaxy = galaxy
          self.ref_wl = None
          self.label = galaxy.objname
          self.build_plot()
          if self._showing_errs: self.toggle_errors()
          # The following is a hack and should not stay
          try:
              self.galaxy.z = objinfo.loc[self.label]['z_Lya']
          except NameError:
              print("No object catalog defined")
          lyaline = 1215.67*(1+self.galaxy.z)
          if (lyaline > self.data['wave'].min()) & (lyaline < self.data['wave'].max()):
              self.lyamark = self.ax.axvline(1215.67*(1+self.galaxy.z), color='0.5', ls=':')
          else:
              self.lyamark = self.ax.axvline(self.data['wave'].min(), color='0.5', alpha=1)
          self.ax.figure.canvas.draw()
  
      def clean_plot(self):
          for p in [self.dataplot, self.errplot, self.nametag, self.lyamark]:
              try:
                  p.remove()
              except AttributeError:
                  pass
  
      def build_plot(self):
          print("Building plot...")
          self.dataplot = self.ax.plot(
              self.data['wave'], self.data['flux'],
              lw=1.5,
              drawstyle='steps-mid',
              label=self.label,
              color='black',
          )[0]
          self.errplot = None
          self.ax.axhline(0, ls='--', color='black')
          self.ax.set_ylabel("Flux [{}]".format(self.data['flux'].unit))
          self.ax.set_xlabel("Observed $\lambda$ [{}]".format(self.data['wave'].unit))
          self.nametag = self.ax.annotate(
              self.galaxy.objname+" ({}/{})".format(self._current_gal+1, len(self.fpaths)),
              (0.02, 0.9), ha='left', xycoords='axes fraction')
          # self._smooth_width = 1  # No smoothing by default
          self.smooth_width(self._smooth_width)
          # Do what I say when certain keys are pressed and the figure is closed.
          self.ax.figure.canvas.mpl_connect('key_press_event', self.on_press)
          self.ax.figure.canvas.mpl_connect('close_event', self.on_close)
  
      def on_press(self, event):
          print("Pressed: ", event.key)
          if event.key == "r":
              print("It was an r!")
              self.toggle_restframe_xaxis()
          # Smoothing
          if event.key in ["j", "down"]:  # Smooth less
              dec = self._smooth_width - 1 if self._smooth_width > 1 else self._smooth_width
              print("Smoothing kernel width: ", self._smooth_width)
              self.smooth_width(dec)
          if event.key in ["k", "up"]:  # Smooth less
              self.smooth_width(self._smooth_width+1)
              print("Smoothing kernel width: ", self._smooth_width)
          # Toggle error spectrum plot
          if event.key == "e":
              self.toggle_errors()
              self._showing_errs = not self._showing_errs
          # Toggle sky lines
          if event.key == "s":
              self.toggle_sky_lines()
          # Go to previous or next galaxy
          if event.key in ["h", "left"]:
              g = self._current_gal
              g = g - 1 if g > 0 else 0
              self._current_gal = g
              self.setup_galaxy()
          if event.key in ["l", "right"]:
              g = self._current_gal 
              g = g + 1 if g < max(self.galindex) else g
              self._current_gal = g
              self.setup_galaxy()
          # Refresh plot
          plt.draw()
  
      def on_close(self, event):
          plt.rcParams["keymap.save"].append("s")
          plt.rcParams["keymap.home"].append("r")
          plt.rcParams["keymap.pan"].append("p")
          plt.rcParams["keymap.yscale"].append("l")
          plt.rcParams["keymap.xscale"].append("k")
          plt.rcParams["keymap.back"].append("left")
          plt.rcParams["keymap.forward"].append("right")
          print("Restored original keymap.")
#+END_SRC

** DONE Understanding the Sky                                             :sky:
:LOGBOOK:
- State "DONE"       from "PROG"       [2021-09-23 Thu 15:25]
- State "PROG"       from              [2021-09-01 Wed 16:57]
CLOCK: [2021-08-31 Tue 15:30]--[2021-08-31 Tue 17:00] =>  1:30
CLOCK: [2021-08-31 Tue 09:30]--[2021-08-31 Tue 13:20] =>  3:50
CLOCK: [2021-08-30 Mon 09:45]--[2021-08-31 Tue 01:04] => 15:19
CLOCK: [2021-08-30 Mon 13:00]--[2021-08-30 Mon 16:15] =>  3:15
CLOCK: [2021-08-30 Mon 23:00]--[2021-08-31 Tue 02:00] =>  3:00
:END:
*** Imports and setup
#+BEGIN_SRC jupyter-python :session sky :results silent
  %pylab
  
  import subprocess
  
  import pandas as pd
  
  import uncertainties.unumpy as unp
  from uncertainties.unumpy import nominal_values
  from uncertainties.unumpy import nominal_values as unv
  from uncertainties.unumpy import std_devs as sdv
  
  from astropy.io import fits
  from astropy.table import Table, vstack
  from astropy.stats import sigma_clip
  from astropy.visualization import simple_norm
  
  from spectools.spectools import GalaxySpectrum, SpecView
  
  from spectres import spectres
  
  from statsmodels.nonparametric.kernel_regression import KernelReg
  
  import seaborn as sns
  icefire = sns.color_palette('icefire', as_cmap=True)
#+END_SRC

*** Find files that are sky frames
Sky frame have as many columns as the numbers of sky fibers, and each
column is a 1D spectrum of a sky fiber.

#+BEGIN_SRC jupyter-python :session sky :var runID=runID OBs=OBs
  skypaths = {}
  for OB in OBs:
      skypaths[OB] = []
      command1 = f"dfits ./Data/Runs/{runID}/science_products/{OB}/*.fits | fitsort pro.catg object obs.start | grep -i sky"
      output_lines = subprocess.check_output(command1, shell=True, text=True).split("\n")[:-1]
      for l in output_lines: skypaths[OB].append(l.split("\t")[0].strip())
#+END_SRC

#+RESULTS[c380b01e06c530ecd8084503157c18aec38589b6]:

*** Open sky files
**** First just make indexed lists

#+BEGIN_SRC jupyter-python :session sky :cache nil :var OBs=OBs 
  skyfiles = {}
  skyOBs = {}
  skydata = {}
  medians = []
  
  # for i, p in enumerate(skypaths):
  #     skyOBs[i] = fits.getheader(p)['HIERARCH ESO OBS NAME']
  #     skydata[i] = fits.getdata(p)
  for OB in OBs:
      skydata[OB] = fits.getdata(skypaths[OB][0])
  
  # for d in skydata.keys():
      plot(median(skydata[OB], 1), 'k-', lw=2, zorder=5)
      medians.append(median(skydata[OB], 1))
      print(median(skydata[OB]))
  medmedianan = array(medians).T
  tmp = plot(median(medmedianan, 1), ls="-", color="c", lw=3, zorder=6)
#+END_SRC

#+RESULTS:
: 1.0260587
: 1.3647907

**** Make stack of each OB's sky fibres to include in master sky later
  
#+BEGIN_SRC jupyter-python :session sky :cache nil :var OBs=OBs
  skystacks = dict.fromkeys(OBs)
  for k in skystacks.keys(): skystacks[k] = []
  for d in skydata.keys():
      # print(d, skyOBs[d])
      skystacks[d].append(skydata[d])
  
  for o in skystacks.keys():
      # print(len(skystacks[o]))
      skystacks[o] = mean(dstack(skystacks[o]), 2)
  
  fig, axes = subplots(1, len(skystacks)+1, dpi=200)
  for l, o in enumerate(skystacks.keys()):
      tmp = axes[l].pcolormesh(skystacks[o], vmin=-2, vmax=50)
      # axes[-1].pcolormesh(skystacks["GOODSS_F3_2"] - skystacks["GOODSS_F3_3"], vmin=-2, vmax=50)
  tmp = colorbar(tmp)
#+END_SRC

#+RESULTS:

*** Find processed fibre spectra

#+BEGIN_SRC jupyter-python :session sky :cache nil :var runID=runID OBs=OBs
  # command2 = "dfits ./Data/Runs/106.219R.001/processed_by_ESO/*.fits | fitsort pro.catg object obs.start | grep -i stack"
  specpaths = {}
  for OB in OBs:
      specpaths[OB] = []
      command2 = f"dfits ./Data/Runs/{runID}/science_products/{OB}/*.fits | fitsort pro.catg object obs.start | grep -i idp"
      output_lines = subprocess.check_output(command2, shell=True, text=True).split("\n")[:-1]
      for l in output_lines: specpaths[OB].append(l.split("\t")[0].strip())
  [len(s) for s in specpaths.values()]
#+END_SRC

#+RESULTS[542beb06ef98c7344f02fcd23cbaa5e77ea97d7e]:
| 112 | 112 |

*** Open spec files
**** Outdated method, but may need some of the other products (check!)
#+BEGIN_SRC jupyter-python :session sky :cache nil
  specfiles = {}
  specdata = {}
  specOBs = {}
  specIDs = {}
  
  for OB in OBs:
      for i, p in enumerate(specpaths[OB]):
          specOBs[i] = fits.getheader(p)["HIERARCH ESO OBS NAME"]
          specIDs[i] = fits.getheader(p)["OBJECT"]
          specdata[i] = fits.getdata(p)
  #+END_SRC

  #+RESULTS:

**** Load spectra by OB and stuff in a hopefully future proof way

#+BEGIN_SRC jupyter-python :session sky :cache nil :var OBs=OBs
  specdict = dict.fromkeys(OBs)
  for i in specdict.keys(): specdict[i] = {}
  
  for OB in OBs:
      for i, p in enumerate(specpaths[OB]):
          targname = fits.getheader(p)["OBJECT"]
          spectrum = fits.getdata(p)
          # print(p, targname)
          # if i > 5:
          #     break
          specdict[OB][targname] = unp.uarray(
              spectrum["FLUX_REDUCED"].flatten(),
              spectrum["ERR_REDUCED"].flatten())
#+END_SRC

#+RESULTS:


#+begin_src jupyter-python :session sky :cache nil :var OBs=OBs
  for k in specdict.keys():
      specdict[k] = pd.DataFrame.from_dict(specdict[k])
#+end_src

#+RESULTS:

*** Make grand object info pane
Just a more wieldy version of Matt's tabs. It's called ~objinfo~.

#+BEGIN_SRC jupyter-python :session sky
  hlist = ["fiberID", "object", "comment", "z_Lya"]
  
  objinfo1 = Table.read('./Data/Targetinfo/GOODS_Center_F3.GIRMED.073308.targinfo.txt', format='ascii.basic')#[hlist]
  objinfo2 = Table.read('./Data/Targetinfo/GOODS_Center_F7.GIRMED.080106.targinfo.txt', format='ascii.basic')[hlist]
  objinfo3 = Table.read('./Data/Targetinfo/GOODS_Center_F8.GIRMED.083005.targinfo.txt', format='ascii.basic')[hlist]
  
  objinfo1['setting'] = 'F3'
  objinfo2['setting'] = 'F7'
  objinfo3['setting'] = 'F8'
  
  objinfo = vstack([objinfo1, objinfo2, objinfo3])
  objinfo['luminosity'] = 0.
  for i, c in enumerate(objinfo["comment"]):
      if objinfo['setting'][i] != 'F3': continue
      a = c.split("=")[-1] if len(c.split('=')) > 1 else 0.0
      objinfo['luminosity'][i] = float(a)
  objinfo.add_index("object")
  # objinfo.add_index("setting")
#+END_SRC

#+RESULTS[5a8f55ad24b77a6b54bcb981ba85ec6ca320620b]:

*** Make median stack for each OB

#+BEGIN_SRC jupyter-python :session sky :cache nil :var OBs=OBs
  waves = specdata[0]['WAVE'].flatten()
  
  obsblocks = {}
  obmedians = {}
  obarrs = {}
  obsblock1 = []  
  obsblock2 = [] 
  
  for OB in OBs:
      obsblocks[OB] = []
      for i in specdata.keys():
          specid = specIDs[i]
          z = objinfo.loc[specid]['z_Lya']
          cenwave = 121.567 * (1 + z)
          spec = specdata[i]['FLUX_REDUCED'].flatten()
          errs = specdata[i]['ERR_REDUCED'].flatten()
          spec = unp.uarray(spec, errs)
          mask = [(waves > cenwave-2) & (waves < cenwave+2)]
          spec = ma.masked_array(spec, mask, fill_value=np.nan)
          obsblocks[OB].append(spec)
  
      obarrs[OB] = array(obsblocks[OB]).T
      obarrs[OB] = hstack([obarrs[OB], skystacks[OB]])
      obmedians[OB] = median(obarrs[OB], 1)
#+END_SRC

#+RESULTS[afe6d59628b2b0c41179599d4fe37cf71648e326]:

*** Plot the whole thing
  
#+BEGIN_SRC jupyter-python :session sky :cache nil :var OBs=OBs
  skycolors = {'GOODSS_F3_2': 'orange', 'GOODSS_F3_3': 'red'}
  speccolors = {'GOODSS_F3_2': 'cyan', 'GOODSS_F3_3': 'purple'}
  smooth_width = 75
  skernel = np.ones(smooth_width) / smooth_width
  OB1, OB2 = None, None
  figure(dpi=200)
  
  OB1, OB2 = None, None
  for OB in OBs:
      for j, data in enumerate(obsblocks[OB]):
          label = f"{OB} science" if j==0 else '_nolegend'
          sdata = convolve(unp.nominal_values(data), skernel, mode='same')
          plot(waves, unp.nominal_values(sdata), ls='-',
               color=speccolors[OB], lw=.1, alpha=.3, label=label)
      plot(waves, convolve(unp.nominal_values(obmedians[OB]), skernel, mode='same'), ls='-', lw=3, color='w', label='_nolegend', zorder=4)
      plot(waves, convolve(unp.nominal_values(obmedians[OB]), skernel, mode='same'), ls='-', lw=2, color=speccolors[OB], label=f'{OB} median', zorder=4)

      skystack = skystacks[OB]
      # ds = len(data.shape)
      # if ds < 2:
      #     data = atleast_2d(data).reshape(-1, 1)
      #     # print("did it!", data.shape)
      for c in range(1):
          label = f"{OB} sky" if c == 0 else '_nolegend'
          cdata = median(skystack, 1)
          sscdata = convolve(cdata, skernel, mode='same')
          plot(waves, sscdata, ls='-', color='w', lw=1.0, alpha=.99, label='_nolegend')
          plot(waves, sscdata, ls='-', color=skycolors[OB], lw=0.80, alpha=.99, label=label, zorder=3)
          annotate('Smoothing width: {} px'.format(smooth_width), (0.05, 0.9), ha='left', xycoords='axes fraction')
          xlabel('$\lambda_{obs}$ [nm]')
          ylabel("Flux density [counts]")
          leg = legend(loc='upper right', fontsize='small')
#+END_SRC

#+RESULTS:
: /home/trive/anaconda3/lib/python3.7/site-packages/matplotlib/colors.py:235: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
:   c = np.array(c)

:outimage:
#+attr_org: :width 700px
[[file:Figures/SkyAndMedians.png]]
:end:

*** Subtract "master sky" from individual fibres
**** Notes
Possibly also scale them somehow because individual filters are
differing in throughput. Fairly easy for the blue setting, but will
probably be quite hard in the redder settings that have strong sky
emission lines, not just scattered moonlight.

**** DONE REMINDER do the below OB-by-OB
:LOGBOOK:
- State "DONE"       from "TODO"       [2021-09-23 Thu 15:25]
:END:
**** Scale them by the ratio of median pixels
:LOGBOOK:
CLOCK: [2021-08-27 Fri 10:27]--[2021-08-27 Fri 10:28] =>  0:01
:END:

#+BEGIN_SRC jupyter-python :session sky :cache nil
  # masterskies = {"GOODSS_F3_2": ob1median, "GOODSS_F3_3": ob2median}  # Original
  masterskies = obmedians  # {"GOODSS_F3_2": ob1median, "GOODSS_F3_3": ob1median}
  skysubbed_obs = dict.fromkeys(specdict.keys())
  skysmooth = 1  # Pixels
  scaledskies = {}
  for i, a in enumerate(specdict.keys()):
      slits = specdict[a]
      for s in slits.columns:
          if slits[s].dtype.byteorder == '>':
              slits[s] = slits[s].values.byteswap().newbyteorder()
      slits = slits.sort_index(axis=1)
      specdict[a] = slits
      numslits = len(slits.columns)
      slitmedians = slits.median(0)
      mastersky = masterskies[a]
      # mastersky = convolve(mastersky, np.ones(skysmooth)/skysmooth, mode='same')
      scalefactors = slitmedians/median(mastersky)
      scaledsky = mastersky.repeat(numslits).reshape(-1, numslits)# * array(scalefactor).reshape([1, -1])
      for i in range(len(slits.columns)):  # scaledsky = 
          scaledsky[:, i] *= median(slits.values[:, i]) / median(scaledsky[:, i])
      skysubbed_obs[a] = slits - scaledsky
      scaledskies[a] = scaledsky
  # stacked_obs = pd.concat(skysubbed_obs.values(), sort=True).groupby(level=0).mean()
  stacked_obs = 0.
  for b in skysubbed_obs.values():
      stacked_obs += b
  stacked_obs /= len(skysubbed_obs)
  # specdict
#+END_SRC

  #+RESULTS:
  
#+BEGIN_SRC jupyter-python :session sky :cache nil
  stacked_obs_out = stacked_obs.copy()
  for col in stacked_obs.columns:
      stacked_obs_out[col+'_data'] = unv(stacked_obs[col])
      stacked_obs_out[col+'_errs'] = sdv(stacked_obs[col])
      stacked_obs_out.drop(col, inplace=True, axis=1)
#+END_SRC

#+RESULTS:

**** Plot for sanity check
#+BEGIN_SRC jupyter-python :session sky :results silent
  fig, axes = subplots(1, 3, dpi=200, sharey=True, sharex=True)
  OBname = "GOODSS_F3_2"
  slits = specdict[OBname]
  scaledsky = scaledskies[OBname]
  skysubbed = skysubbed_obs[OBname]
  colorcut = 5
  norm = simple_norm(unv(slits), min_cut=-colorcut, max_cut=colorcut, stretch='linear')
  # cmap = "cubehelix"
  cmap = icefire
  # cmap = "RdBu"
  pc = axes[0].pcolormesh(unv(slits), norm=norm, cmap=cmap)
  axes[1].pcolormesh(unv(scaledsky), norm=norm, cmap=cmap)
  # axes[2].pcolormesh(unv(stacked_obs), norm=norm, cmap=cmap)
  axes[2].pcolormesh(unv(skysubbed), norm=norm, cmap=cmap)
  # pc = axes[0].imshow(unv(slits), norm=norm, cmap=cmap)
  # axes[1].imshow(unv(scaledsky), norm=norm, cmap=cmap)
  # # axes[2].imshow(unv(stacked_obs), norm=norm, cmap=cmap)
  # axes[2].imshow(unv(skysubbed), norm=norm, cmap=cmap)
  axes[0].set_title("Science fibres")
  axes[1].set_title("Master Sky")
  axes[2].set_title("Sky subtracted science")
  bar = fig.colorbar(pc, ax=axes.ravel().tolist(), shrink=0.95)
  # fig.suptitle("FLAMES sky subtraction (sqrt scaled)")
  fig.suptitle("FLAMES sky subtraction")
  # colorbar()
#+END_SRC

:output:
#+attr_org: :width 800 px
[[file:./Figures/SkySubtraction.png]]
:end:

**** Save sky subracted science fibres
#+BEGIN_SRC jupyter-python :session sky :results raw :cache nil
  stacked_obs_out["wave"] = waves
  stacked_obs_table = Table.from_pandas(stacked_obs_out)
  # print(stacked_obs_table)
  stacked_obs_table.write("./Products/Runs/106.219R.001/SkySubtractedFibresUnc.ecsv", overwrite=True)
#+END_SRC

#+RESULTS:

**** Plot individual spectra

#+BEGIN_SRC jupyter-python :session sky :cache nil
  sot = stacked_obs_table
  def maketheplot(objname, smooth=1, ax=plt.gca()):
      kernel = np.ones(smooth)/smooth
      data = convolve(sot[objname+"_data"], kernel, mode='same')
      ax.plot(sot["wave"], data, 'k-')
      z = objinfo.loc[objname]['z_Lya']
      lyawave = 121.567 * (1 + z)
      ax.axvline(lyawave, ls='--', color='0.4')
  maketheplot('mudf1482', smooth=10)
#+END_SRC

#+RESULTS:

**** Stack them in rest frame

#+BEGIN_SRC jupyter-python :session sky :cache nil
  sot = stacked_obs_table
  rebinned, rebinerr = {}, {}
  wavebase = np.arange(100, 140, 0.02/4)
  oversmooth = 10
  overkernel = np.ones(oversmooth) / oversmooth
  objects = unique([c.split('_')[0] for c in sot.colnames])
  # for i in sot.colnames:
  for i in objects:
      if i == "wave": continue
      z = objinfo.loc[i]["z_Lya"]
      data = sot[i+"_data"]
      errs = sot[i+"_errs"]
      wav = waves / (1 + z)
      # resam = np.interp(wavebase, wav, data, left=np.nan, right=np.nan)
      resamdata, resamerrs = spectres(
          wavebase, wav, data, spec_errs=errs,
          fill=np.nan, verbose=False
      )
      outarray = unp.uarray(resamdata, resamerrs)
      outmask = (isnan(resamdata))
      rebinned[i] = resamdata  # ma.masked_array(outarray, outmask)
      rebinerr[i] = resamerrs  # ma.masked_array(outarray, outmask)
  rebindf = pd.DataFrame.from_dict(rebinned)
  reberdf = pd.DataFrame.from_dict(rebinerr)
#+END_SRC

  #+RESULTS:
  
#+BEGIN_SRC jupyter-python :session sky :cache nil :results silent
  meanstack = nanmean(rebindf, 1)
  medianstack = nanmedian(rebindf, 1)
  meerstack = sqrt(nansum(reberdf, 1))/len(reberdf.columns)
  medierstack = nanmedian(reberdf, 1)
  fig, ax = subplots(1, 1, dpi=200)
  ax.plot(wavebase, meanstack, label='Mean stack')
  ax.plot(wavebase, medianstack, label='Median stack')
  ax.plot(wavebase, meerstack*sqrt(pi/2), label='Median errors')  # From phys SE Q#292871
  ax.plot(wavebase, meerstack, label='Mean errors')
  ax.axvline(121.567, ls="--", color="0.7")
  ax.axhline(0, ls="--", color="k")
  legend()
#+END_SRC

*** Check SNR of brightes object
**** Create the relevant variables etc. 
#+BEGIN_SRC jupyter-python :session sky
  wave = stacked_obs_table["wave"] * 10
  flux, errs = stacked_obs_table["mw126015035_data"], stacked_obs_table["mw126015035_errs"]
  uflux = unp.uarray(flux, errs)
  
  lamlo  = 5055.8
  lamhi  = 5072.9
  
  lidx = where((wave > lamlo) & (wave < lamhi))
  nidx = where((wave > 4950) & (wave < 5050))
#+END_SRC

#+RESULTS[a4f9e788e37398eec6f10cc63e5a370b3ed759c1]:

**** The SNRs, all of them
#+BEGIN_SRC jupyter-python :session sky :cache nil
  usum = uflux[lidx].sum()
  
  # snr1 = unv(usum) / std(usum)
  snr1 = usum.n / usum.s
  
  S = flux[lidx].sum()
  N = sqrt((errs[lidx]**2).sum())
  
  snr2 = S / N
  
  N2 = flux[nidx].std()
  L = len(where(lidx)[0])
  snr3 = S / (N2 * sqrt(L))
  
  snr1, snr2, snr3
#+END_SRC

#+RESULTS:
| 2.2445611755053965 | 2.2445611755053974 | 5.265660784024975 |

**** Plot to check all is good
#+BEGIN_SRC jupyter-python :session sky :cache nil :results silent
  kwidth = 75
  kernel = np.ones(kwidth) / kwidth
  sflux = convolve(flux, kernel, mode="same")
  figure(dpi=200)
  plot(wave, flux)
  plot(wave, errs)
  plot(wave[lidx], flux[lidx])
  plot(wave[lidx], errs[lidx])
  plot(wave, sflux)
  axhline(N2, color='0.5', ls=':', zorder=0)
  axhline(0, color='k', ls='--', zorder=0)
#+END_SRC

*** Check the error behavior, Matt style
:LOGBOOK:
CLOCK: [2021-09-01 Wed 20:10]--[2021-09-01 Wed 23:46] =>  3:36
- State "DONE"       from "PROG"       [2021-09-01 Wed 16:56]
CLOCK: [2021-09-01 Wed 13:30]--[2021-09-01 Wed 16:56] =>  3:26
- State "PROG"       from "NEXT"       [2021-08-31 Tue 20:53]
- State "NEXT"       from              [2021-08-30 Mon 23:13]
:END:
**** Notes
***** Which variables to use:
- Wavelength vector :: ~waves~
- Unsubtracted data :: ~slits~
- Master sky :: ~scaledsky~ (matching each fiber), or ~mastersky~ (only
  one vector)
- For data :: Should I use ~stacked_obs~ which is from both OBs, or
  ~skysubbed_obs~ which is from each OB?

***** For the stacked spectrum, I use:
- Mean stack :: ~meanstack~
- Median stack :: ~medianstack~
- Mean errors :: ~meerstack~
- Median errors :: ~medierstack~
- Restframe wave grid :: ~wavebase~

**** Define arrays to work on etc.
:LOGBOOK:
- State "DONE"       from              [2021-09-01 Wed 16:56]
:END:

***** Observed frame

#+BEGIN_SRC jupyter-python :session sky :results silent
  OBname = "GOODSS_F3_2"
  wavidx = where((waves > 470) & (waves < 480))[0]
  slits = specdict[OBname]
  scaledsky = scaledskies[OBname]
  skysubbed = skysubbed_obs[OBname]
  rawslice = slits.values[wavidx, :]
  skyslice = scaledsky[wavidx, :]
  mstslice = mastersky[wavidx]
  subslice = skysubbed.values[wavidx, :]
  # mstslice.shape, subslice.shape, skyslice.shape, rawslice.shape
#+END_SRC

**** Measure ~mean()~, ~std()~ directly for each slit; compare
:LOGBOOK:
- State "DONE"       from              [2021-09-01 Wed 16:56]
:END:

#+BEGIN_SRC jupyter-python :session sky :results silent
  rawmeans = unv(rawslice).mean(0)
  rawerrs = unv(rawslice).std(0)
  rawsnrs = rawmeans/rawerrs 
  
  skymeans = unv(skyslice).mean(0)
  skyerrs = unv(skyslice).std(0)
  skysnrs = skymeans/skyerrs
  
  submeans = unv(subslice).mean(0)
  suberrs = unv(subslice).std(0)
  subsnrs = submeans/suberrs
  
  fit, axes = subplots(1, 3, sharex=True, sharey=True, dpi=200)
  axes[0].pcolormesh(unv(rawslice), cmap='RdBu', norm=norm)
  axes[1].pcolormesh(unv(skyslice), cmap='RdBu', norm=norm)
  axes[2].pcolormesh(unv(subslice), cmap='RdBu', norm=norm)
#+END_SRC


  
#+BEGIN_SRC jupyter-python :session sky :results silent
  fig, axes = subplots(1, 3, dpi=200, sharex=True, sharey=True)
  sca(axes[0])
  plot(rawsnrs, label="Raw")
  plot(skysnrs, label="Sky")
  plot(subsnrs, label="Subtracted")
  title("SNRs (470 nm < $\lambda$ < 480 nm)")
  ylabel("SNR")
  legend()
  
  sca(axes[1])
  title("Stddev (470 nm < $\lambda$ < 480 nm)")
  plot(rawerrs, label="Raw")
  plot(skyerrs, label="Sky")
  plot(suberrs, label="Subtracted")
  xlabel("Fiber #")
  legend()
  
  sca(axes[2])
  title("Mean (470 nm < $\lambda$ < 480 nm)")
  plot(rawmeans, label="Raw")
  plot(skymeans, label="Sky")
  plot(submeans, label="Subtracted")
  legend()
  
  for ax in axes:
      ax.axhline(0, color='k', ls='--', zorder=0)
#+END_SRC

:output:
#+attr_org: :width 900px
[[file:Figures/NoiseAndSnrProperties.png]]
:end:

**** Do it for the stacked spectrum, yo
:LOGBOOK:
- State "DONE"       from              [2021-09-01 Wed 16:55]
:END:

#+BEGIN_SRC jupyter-python :session sky 
  therange = (wavebase > 114) & (wavebase < 119)
  meanmean = meanstack[therange].mean()
  medianmean = medianstack[therange].mean()
  meanstd = meanstack[therange].std()
  medianstd = medianstack[therange].std()
  array([meanmean, meanstd, medianmean, medianstd]).reshape(2, 2)
#+END_SRC

#+RESULTS[cf6472d48eb5618afc48f4ac8cd64fb1d058d150]:
: array([[-0.04749585,  0.21781602],
:        [-0.07829324,  0.23636025]])

***** Old one:
: array([[-0.04508362,  0.25937943],
:        [-0.05128429,  0.21186306]])

*** Make plots of Ly\alpha of 5 brightest F3-galaxies
#+BEGIN_SRC jupyter-python :session sky
  OOIs = objinfo[objinfo['setting']=='F3'].copy()[['object', 'luminosity', 'z_Lya']]
  OOIs = Table(OOIs)
  OOIs.sort('luminosity', reverse=True)
  targets = OOIs['object'][:5]
  targinfo = OOIs[:5]
  print(OOIs)
  print(targinfo)
#+END_SRC

#+RESULTS[1b2b59bb641dd06fd78abfed5a8e19b0ef3a87e7]:
#+begin_example
     object    luminosity z_Lya 
  ------------ ---------- ------
   mw126015035      42.97  3.164
  emw403004047      42.87 3.1354
   mw115004089      42.84 3.0267
   mw146007227      42.79 3.0556
  emw402004146      42.76  3.125
   mw102012085      42.74 3.1673
   mw122002034      42.72 3.0027
   mw106003018      42.66 2.9776
         lego4      42.64   3.15
   mw121001001      42.64 2.9978
           ...        ...    ...
        sky178        0.0 -999.0
        sky212        0.0 -999.0
        sky208        0.0 -999.0
        sky268        0.0 -999.0
        sky070        0.0 -999.0
        sky054        0.0 -999.0
        sky067        0.0 -999.0
        sky053        0.0 -999.0
        sky220        0.0 -999.0
        sky218        0.0 -999.0
        sky056        0.0 -999.0
  Length = 132 rows
     object    luminosity z_Lya 
  ------------ ---------- ------
   mw126015035      42.97  3.164
  emw403004047      42.87 3.1354
   mw115004089      42.84 3.0267
   mw146007227      42.79 3.0556
  emw402004146      42.76  3.125
#+end_example

*** make the plot
#+BEGIN_SRC jupyter-python :session sky
  fig, axes = subplots(len(targets), 1, dpi=200, figsize=(5, 8))
  wave = stacked_obs_table['wave'] * 10
  padding = 50
  for i, o in enumerate(targets):
      print(o)
      data = stacked_obs_table[f"{o}_data"]
      axes[i].plot(wave, data, 'k-')
      lyawave = (1+objinfo.loc[o]['z_Lya']) * 1215.67
      axes[i].axvline(lyawave, ls=':', color='0.5')
      axes[i].axhline(0, ls='--', color='k')
      xmin, xmax = lyawave-padding, lyawave+padding
      axes[i].set_xlim(xmin, xmax)
      axes[i].annotate(o, (0.02, 0.85), xycoords='axes fraction', ha='left')
  tight_layout()
  savefig('Figures/BrightLyas.pdf')
  savefig('Figures/BrightLyas.png')
#+END_SRC

#+RESULTS[e22de616fff45c19b60949ec952e969fe0fb410c]:
: mw126015035
: emw403004047
: mw115004089
: mw146007227
: emw402004146

:figure:
#+attr_org: :width 500px
[[file:Figures/BrightLyas.png]]
:end:

* WONTDO Check SNR of brightest object
:LOGBOOK:
- State "WONTDO"     from              [2021-10-05 Tue 16:18]
:END:
** Imports & setup
#+BEGIN_SRC jupyter-python :session brightsnr :results silent
  %pylab
  
  from astropy.io import fits
  from astropy.table import Table
  
  from uncertainties.unumpy import uarray, nominal_values, std_devs
  
  stackpath = "/home/trive/Arbejde/AAB-LyaFLAMES/Data/Runs/106.219R.001/science_products/stacks/mw126015035_1D.ecsv"
#+END_SRC

** Next.... thing.
#+BEGIN_SRC jupyter-python :session brightsnr
  fluxtable = Table.read(stackpath)
  print(fluxtable)
#+END_SRC

#+RESULTS[402b2edf38f69265512595244378984ba135f13a]:
#+begin_example
     wave          flux               std                snr        
   Angstrom        adu                adu                           
  --------- ------------------ ------------------ ------------------
   4498.688  25.68206024169922 2.9033837775362685  8.845561665117627
   4498.888 13.798957824707031  2.674503967998706 5.1594456354583755
   4499.088  3.739696979522705  2.662502400004138 1.4045797590705995
   4499.288 15.652979850769043 2.6608967736632674  5.882595674397216
  4499.4883 17.127975463867188  2.652176084944181  6.458083820715724
   4499.688 16.351572036743164 2.6802199235937536 6.1008322088801865
   4499.888 18.281362533569336  2.744383442829769  6.661373279063071
  4500.0884  9.079835891723633  2.742980458536538  3.310208012407058
   4500.288 2.4442431926727295  2.561890286175902 0.9540780125761034
   4500.488 11.785313606262207 2.6223067819919046   4.49425432874413
        ...                ...                ...                ...
   5075.848 12.682451248168945  3.637145574420258  3.486924289575751
  5076.0483  16.60905647277832 3.7104348978832458  4.476309901638099
   5076.248 7.1889753341674805   3.48940401165017 2.0602301453673606
   5076.448 13.144828796386719  3.650103201526447 3.6012211355803982
  5076.6484 17.495054244995117  3.559382953043718  4.915193019631298
   5076.848  25.19823455810547 3.7278236760544763  6.759502795147019
   5077.048 17.195249557495117 3.6300450105579305  4.736924613188816
   5077.248 22.879905700683594  3.741463407756966  6.115229044669519
   5077.448 23.628808975219727 3.7220576500033977  6.348318913114674
   5077.648                0.0                0.0                 --
  Length = 2896 rows
#+end_example

** And ... next
#+BEGIN_SRC jupyter-python :session brightsnr
  lamlo  = 5055.8
  lamhi  = 5072.9
  
  wave = fluxtable["wave"]
  flux = fluxtable["flux"]
  std = fluxtable["std"]
  lidx = np.where((wave > lamlo) & (wave < lamhi))
  
  wavesec, fluxsec, errssec = wave[lidx], flux[lidx], std[lidx]
  fluxu = uarray(fluxsec, errssec)
  SNRscalar = fluxu.sum()
  print(SNRscalar)
#+END_SRC

#+RESULTS[59e0c1c9092d4de843fdb3ccc15d5ecdbb284603]:
: 1467+/-33

* DONE Check disp sol vs. reference disp sol
:LOGBOOK:
- State "DONE"       from "TODO"       [2021-09-16 Thu 11:34]
:END:
See fits header keywords in downloaded data

* Org clock summaries
:LOGBOOK:
CLOCK: [2021-09-01 Wed 23:46]--[2021-09-01 Wed 23:46] =>  0:00
:END:

for this project specifically

#+BEGIN: clocktable :scope file :maxlevel 3
#+CAPTION: Clock summary at [2021-09-03 Fri 13:23]
| Headline                                       | Time     |          |      |
|------------------------------------------------+----------+----------+------|
| *Total time*                                     | *2d 10:40* |          |      |
|------------------------------------------------+----------+----------+------|
| About the instrument (instrument...            | 2:29     |          |      |
| Flames data organization                       | 0:22     |          |      |
| \_  Data structure overview                    |          |     0:21 |      |
| Understanding data                             | 2d 7:49  |          |      |
| \_  Preview data                               |          |    15:52 |      |
| \_    Take a swing at making a more...         |          |          | 5:04 |
| \_  Understanding the Sky                      |          | 1d 15:57 |      |
| \_    Subtract "master sky" from individual... |          |          | 6:01 |
| \_    Check the error behavior, Matt style     |          |          | 7:02 |
#+END:

* Bibliography

bibliography:/home/trive/Dropbox/org/AllPapers.bib

